var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"i":[{"n":"acautomaton"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"g":["dense"],"n":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"n":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"dense"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",9,{"i":[{"n":"u32"}],"o":{"n":"dense"}}],[11,"goto","","",9,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",9,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"sparse"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",10,{"i":[{"n":"u32"}],"o":{"n":"sparse"}}],[11,"goto","","",10,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",10,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"i":[{"n":"t"}],"o":{"n":"acautomaton"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec<T>`.",null,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",0,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",0,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used during decoding, that error will be stored and returned here.",1,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid encoding, this error will be returned.  This error is only possible if a stream is corrupted.  A stream produced from `encode` or `encode_into` should never produce an InvalidEncoding error.",1,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this error is returned.",1,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",2,null],[13,"Bounded","","",2,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"i":[{"n":"t"},{"n":"sizelimit"}],"o":{"g":["vec"],"n":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"i":[{"n":"t"},{"n":"w"},{"n":"sizelimit"}],"o":{"n":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"i":[{"n":"r"},{"n":"sizelimit"}],"o":{"n":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"i":[{"n":"t"}],"o":{"n":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be encoded.",null,{"i":[{"n":"t"},{"n":"u64"}],"o":{"g":["u64"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"new","","",3,{"i":[{"n":"w"}],"o":{"n":"encoderwriter"}}],[11,"emit_nil","","",3,{"i":[{"n":"self"}],"o":{"n":"encodingresult"}}],[11,"emit_usize","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encodingresult"}}],[11,"emit_u64","","",3,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encodingresult"}}],[11,"emit_u32","","",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encodingresult"}}],[11,"emit_u16","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encodingresult"}}],[11,"emit_u8","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encodingresult"}}],[11,"emit_isize","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encodingresult"}}],[11,"emit_i64","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encodingresult"}}],[11,"emit_i32","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encodingresult"}}],[11,"emit_i16","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encodingresult"}}],[11,"emit_i8","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encodingresult"}}],[11,"emit_bool","","",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encodingresult"}}],[11,"emit_f64","","",3,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encodingresult"}}],[11,"emit_f32","","",3,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encodingresult"}}],[11,"emit_char","","",3,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encodingresult"}}],[11,"emit_str","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encodingresult"}}],[11,"emit_enum","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_enum_variant","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_enum_variant_arg","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_enum_struct_variant","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_struct_field","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_tuple","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_tuple_arg","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_tuple_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_option","","",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_option_none","","",3,{"i":[{"n":"self"}],"o":{"n":"encodingresult"}}],[11,"emit_option_some","","",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_seq","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_seq_elt","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_map","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_map_elt_key","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"emit_map_elt_val","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encodingresult"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",1,{"i":[{"n":"ioerror"}],"o":{"n":"decodingerror"}}],[11,"new","","",4,{"i":[{"n":"r"},{"n":"sizelimit"}],"o":{"n":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",4,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read_nil","","",4,{"i":[{"n":"self"}],"o":{"n":"decodingresult"}}],[11,"read_usize","","",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decodingresult"}}],[11,"read_u64","","",4,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decodingresult"}}],[11,"read_u32","","",4,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decodingresult"}}],[11,"read_u16","","",4,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decodingresult"}}],[11,"read_u8","","",4,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decodingresult"}}],[11,"read_isize","","",4,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decodingresult"}}],[11,"read_i64","","",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decodingresult"}}],[11,"read_i32","","",4,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decodingresult"}}],[11,"read_i16","","",4,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decodingresult"}}],[11,"read_i8","","",4,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decodingresult"}}],[11,"read_bool","","",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decodingresult"}}],[11,"read_f64","","",4,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decodingresult"}}],[11,"read_f32","","",4,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decodingresult"}}],[11,"read_char","","",4,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decodingresult"}}],[11,"read_str","","",4,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"decodingresult"}}],[11,"read_enum","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_struct_field","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_tuple","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_tuple_arg","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_tuple_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_tuple_struct_arg","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_option","","",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_seq","","",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_seq_elt","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_map","","",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_map_elt_key","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"read_map_elt_val","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decodingresult"}}],[11,"error","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodingerror"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"refbox"}],"o":{"n":"ordering"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"refbox"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"strbox"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"strbox"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"slicebox"}],"o":{"n":"ordering"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"slicebox"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",5,{"i":[{"n":"t"}],"o":{"n":"refbox"}}],[11,"take","","Takes the value out of this refbox.",5,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"try_take","","Tries to take the value out of this refbox.",5,{"i":[{"n":"self"}],"o":{"g":["box","refbox"],"n":"result"}}],[11,"encode","","",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",5,{"i":[{"n":"d"}],"o":{"g":["refbox"],"n":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",6,{"i":[{"n":"str"}],"o":{"n":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",6,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",6,{"i":[{"n":"self"}],"o":{"n":"strbox"}}],[11,"as_ref","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"boxed","","Creates a new StrBox made from an allocated String.",6,{"i":[{"n":"string"}],"o":{"n":"strbox"}}],[11,"take","","Takes the value out of this refbox.",6,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"try_take","","Tries to take the value out of this refbox.",6,{"i":[{"n":"self"}],"o":{"g":["string","strbox"],"n":"result"}}],[11,"encode","","",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",6,{"i":[{"n":"d"}],"o":{"g":["strbox"],"n":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",7,null],[11,"into_vec","","Extract a `Vec<T>` from a `SliceBox`.",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",7,{"i":[{"n":"self"}],"o":{"n":"slicebox"}}],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec<T>`.",7,{"i":[{"n":"vec"}],"o":{"n":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"try_take","","Tries to take the value out of this refbox.",7,{"i":[{"n":"self"}],"o":{"g":["vec","slicebox"],"n":"result"}}],[11,"encode","","",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",7,{"i":[{"n":"d"}],"o":{"g":["slicebox"],"n":"result"}}],[11,"deref","","",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"sizelimit"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"sizelimit"}],"o":{"n":"bool"}}]],"paths":[[4,"EncodingError"],[4,"DecodingError"],[4,"SizeLimit"],[3,"EncoderWriter"],[3,"DecoderReader"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"","items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a write cursor. When reads and writes reach the end of the allocated buffer, wraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr` values, without copying the data in the pieces. The concatenation is represented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"i":[{"n":"usize"}],"o":{"n":"memref"}}],[11,"allocate","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory using alternate stratgies than the default Rust heap allocator. Also does not require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"o":{"n":"memref"}}],[11,"is_none","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"memref"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a write cursor. When reads and writes reach the end of the allocated buffer, wraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"i":[{"n":"usize"}],"o":{"n":"mutbytebuf"}}],[11,"none","","",5,{"o":{"n":"bytebuf"}}],[11,"from_mem_ref","","",5,{"i":[{"n":"memref"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"bytebuf"}}],[11,"capacity","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"flip","","",5,{"i":[{"n":"self"}],"o":{"n":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position to the byte after the previous write.",5,{"i":[{"n":"self"}],"o":{"n":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"i":[{"n":"self"}],"o":{"n":"seqbytestr"}}],[11,"to_bytes","","",5,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"i":[{"n":"self"}]}],[11,"reset","","Resets the read position to the previously marked position.",5,{"i":[{"n":"self"}]}],[11,"remaining","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"read_slice","","",5,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_mem_ref","","",6,{"i":[{"n":"memref"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"i":[{"n":"self"}],"o":{"n":"seqbytestr"}}],[11,"to_bytes","","",6,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"i":[{"n":"self"}]}],[11,"reset","","Resets the read position to the previously marked position.",6,{"i":[{"n":"self"}]}],[11,"remaining","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"read_slice","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"capacity","","",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"flip","","",7,{"i":[{"n":"self"}],"o":{"n":"bytebuf"}}],[11,"clear","","",7,{"i":[{"n":"self"}]}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"advance","","",7,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"i":[{"n":"usize"}],"o":{"n":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"mark","","Marks the current read location.",8,{"i":[{"n":"self"}]}],[11,"reset","","Resets the read position to the previously marked position.",8,{"i":[{"n":"self"}]}],[11,"clear","","Resets all internal state to the initial state.",8,{"i":[{"n":"self"}]}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ringbuf"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"remaining","","",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remaining","","",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"advance","","",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"advance","","",10,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",11,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"take"}}],[11,"into_inner","","",11,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_ref","","",11,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"limit","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit","","",11,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remaining","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"read","","",11,null],[11,"remaining","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"i":[{"n":"self"},{"n":"usize"}]}],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length between 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by the number of bytes read. Returns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by the number of bytes read.",13,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["usize"],"n":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of length between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the cursor by the number of bytes written. Returns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance the cursor by the number of bytes written.",15,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["usize"],"n":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize"],"n":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize"],"n":"result"}}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",18,null],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr` values, without copying the data in the pieces. The concatenation is represented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",19,null],[11,"of","","",19,{"i":[{"n":"b"}],"o":{"n":"bytes"}}],[11,"empty","","",19,{"o":{"n":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it otherwise None.",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value, otherwise, returns the original `Bytes` as `Err`.",19,{"i":[{"n":"self"}],"o":{"g":["bytes"],"n":"result"}}],[11,"buf","","",19,{"i":[{"n":"self"}],"o":{"g":["buf"],"n":"box"}}],[11,"concat","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bytes"}}],[11,"len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"split_at","","",19,null],[11,"to_bytes","","",19,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"index","","",19,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u8"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"drop","","",19,{"i":[{"n":"self"}]}],[11,"from_slice","","",20,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",20,{"i":[{"n":"b"}],"o":{"n":"rope"}}],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"buf","","",20,{"i":[{"n":"self"}],"o":{"n":"ropebuf"}}],[11,"concat","","",20,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bytes"}}],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"to_bytes","","",20,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"index","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u8"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"rope"}}],[11,"remaining","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",18,null],[11,"advance","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",21,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",21,{"i":[{"n":"memref"},{"n":"u32"},{"n":"u32"}],"o":{"n":"seqbytestr"}}],[11,"buf","","",21,{"i":[{"n":"self"}],"o":{"n":"robytebuf"}}],[11,"concat","","",21,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bytes"}}],[11,"len","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"to_bytes","","",21,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"index","","",21,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u8"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"seqbytestr"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"smallbytestr"}}],[11,"zero","","",22,{"o":{"n":"smallbytestr"}}],[11,"from_slice","","",22,null],[11,"as_slice","","",22,null],[11,"buf","","",22,{"i":[{"n":"self"}],"o":{"n":"smallbytestrbuf"}}],[11,"concat","","",22,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bytes"}}],[11,"len","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"slice","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"to_bytes","","",22,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"index","","",22,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u8"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"smallbytestrbuf"}}],[11,"remaining","","",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",23,null],[11,"advance","","",23,{"i":[{"n":"self"},{"n":"usize"}]}],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original value. Since only immutable access is permitted, operations do not require copying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",24,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the `ByteStr`.",24,null],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self` with the given `Bytes`.",24,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",24,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin` (inclusive) and `end` (exclusive)",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from `begin` (inclusive) to the end of the byte str.",24,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up to `end` (exclusive).",24,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",24,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing identical bytes",25,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"eq","bytes","",21,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"buferror"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["coap"] = {"doc":"Implementation of the [CoAP Protocol][spec].","items":[[0,"message","coap","",null,null],[0,"header","coap::message","",null,null],[3,"HeaderRaw","coap::message::header","",null,null],[3,"Header","","",null,null],[12,"code","","",0,null],[4,"MessageClass","","",null,null],[13,"Empty","","",1,null],[13,"Request","","",1,null],[13,"Response","","",1,null],[13,"Reserved","","",1,null],[4,"RequestType","","",null,null],[13,"Get","","",2,null],[13,"Post","","",2,null],[13,"Put","","",2,null],[13,"Delete","","",2,null],[13,"UnKnown","","",2,null],[4,"ResponseType","","",null,null],[13,"Created","","",3,null],[13,"Deleted","","",3,null],[13,"Valid","","",3,null],[13,"Changed","","",3,null],[13,"Content","","",3,null],[13,"BadRequest","","",3,null],[13,"Unauthorized","","",3,null],[13,"BadOption","","",3,null],[13,"Forbidden","","",3,null],[13,"NotFound","","",3,null],[13,"MethodNotAllowed","","",3,null],[13,"NotAcceptable","","",3,null],[13,"PreconditionFailed","","",3,null],[13,"RequestEntityTooLarge","","",3,null],[13,"UnsupportedContentFormat","","",3,null],[13,"InternalServerError","","",3,null],[13,"NotImplemented","","",3,null],[13,"BadGateway","","",3,null],[13,"ServiceUnavailable","","",3,null],[13,"GatewayTimeout","","",3,null],[13,"ProxyingNotSupported","","",3,null],[13,"UnKnown","","",3,null],[4,"MessageType","","",null,null],[13,"Confirmable","","",4,null],[13,"NonConfirmable","","",4,null],[13,"Acknowledgement","","",4,null],[13,"Reset","","",4,null],[13,"Invalid","","",4,null],[5,"class_to_code","","",null,{"i":[{"n":"messageclass"}],"o":{"n":"u8"}}],[5,"code_to_class","","",null,{"i":[{"n":"u8"}],"o":{"n":"messageclass"}}],[5,"code_to_str","","",null,{"i":[{"n":"u8"}],"o":{"n":"string"}}],[5,"class_to_str","","",null,{"i":[{"n":"messageclass"}],"o":{"n":"string"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",5,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",5,{"i":[{"n":"__d"}],"o":{"g":["headerraw"],"n":"result"}}],[11,"default","","",5,{"o":{"n":"headerraw"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"messageclass"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"messageclass"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"messageclass"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"requesttype"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"requesttype"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"responsetype"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"responsetype"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"messagetype"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"o":{"n":"header"}}],[11,"from_raw","","",0,{"i":[{"n":"headerraw"}],"o":{"n":"header"}}],[11,"to_raw","","",0,{"i":[{"n":"self"}],"o":{"n":"headerraw"}}],[11,"set_version","","",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"get_version","","",0,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"set_type","","",0,{"i":[{"n":"self"},{"n":"messagetype"}]}],[11,"get_type","","",0,{"i":[{"n":"self"}],"o":{"n":"messagetype"}}],[11,"set_token_length","","",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"get_token_length","","",0,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"set_code","","",0,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get_code","","",0,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_message_id","","",0,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"get_message_id","","",0,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[0,"request","coap::message","",null,null],[3,"CoAPRequest","coap::message::request","",null,null],[12,"message","","",6,null],[12,"response","","",6,null],[12,"source","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"coaprequest"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",6,{"o":{"n":"coaprequest"}}],[11,"from_packet","","",6,{"i":[{"n":"packet"},{"n":"socketaddr"}],"o":{"n":"coaprequest"}}],[11,"set_method","","",6,{"i":[{"n":"self"},{"n":"method"}]}],[11,"get_method","","",6,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"set_path","","",6,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get_path","","",6,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"get_message","","",6,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[11,"get_mut_message","","",6,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[11,"get_header","","",6,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"get_mut_header","","",6,{"i":[{"n":"self"}],"o":{"n":"header"}}],[0,"response","coap::message","",null,null],[3,"CoAPResponse","coap::message::response","",null,null],[12,"message","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"coapresponse"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",7,{"i":[{"n":"packet"}],"o":{"g":["coapresponse"],"n":"option"}}],[11,"set_status","","",7,{"i":[{"n":"self"},{"n":"status"}]}],[11,"get_status","","",7,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"get_message","","",7,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[11,"get_mut_message","","",7,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[11,"get_header","","",7,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"get_mut_header","","",7,{"i":[{"n":"self"}],"o":{"n":"header"}}],[0,"packet","coap::message","",null,null],[3,"Packet","coap::message::packet","",null,null],[12,"header","","",8,null],[12,"payload","","",8,null],[4,"CoAPOption","","",null,null],[13,"IfMatch","","",9,null],[13,"UriHost","","",9,null],[13,"ETag","","",9,null],[13,"IfNoneMatch","","",9,null],[13,"Observe","","",9,null],[13,"UriPort","","",9,null],[13,"LocationPath","","",9,null],[13,"UriPath","","",9,null],[13,"ContentFormat","","",9,null],[13,"MaxAge","","",9,null],[13,"UriQuery","","",9,null],[13,"Accept","","",9,null],[13,"LocationQuery","","",9,null],[13,"Block2","","",9,null],[13,"Block1","","",9,null],[13,"ProxyUri","","",9,null],[13,"ProxyScheme","","",9,null],[13,"Size1","","",9,null],[4,"ContentFormat","","",null,null],[13,"TextPlain","","",10,null],[13,"ApplicationLinkFormat","","",10,null],[13,"ApplicationXML","","",10,null],[13,"ApplicationOctetStream","","",10,null],[13,"ApplicationEXI","","",10,null],[13,"ApplicationJSON","","",10,null],[4,"ObserveOption","","",null,null],[13,"Register","","",11,null],[13,"Deregister","","",11,null],[4,"PackageError","","",null,null],[13,"InvalidHeader","","",12,null],[13,"InvalidPacketLength","","",12,null],[4,"ParseError","","",null,null],[13,"InvalidHeader","","",13,null],[13,"InvalidTokenLength","","",13,null],[13,"InvalidOptionDelta","","",13,null],[13,"InvalidOptionLength","","",13,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"coapoption"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"contentformat"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_i64","","",10,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",10,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"observeoption"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_i64","","",11,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",11,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",8,{"o":{"n":"packet"}}],[11,"set_token","","",8,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"get_token","","",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_option","","",8,{"i":[{"n":"self"},{"n":"coapoption"},{"g":["vec"],"n":"linkedlist"}]}],[11,"set_content_format","","",8,{"i":[{"n":"self"},{"n":"contentformat"}]}],[11,"set_payload","","",8,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"add_option","","",8,{"i":[{"n":"self"},{"n":"coapoption"},{"g":["u8"],"n":"vec"}]}],[11,"get_option","","",8,{"i":[{"n":"self"},{"n":"coapoption"}],"o":{"g":["linkedlist"],"n":"option"}}],[11,"clear_option","","",8,{"i":[{"n":"self"},{"n":"coapoption"}]}],[11,"get_content_format","","",8,{"i":[{"n":"self"}],"o":{"g":["contentformat"],"n":"option"}}],[11,"set_observe","","",8,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"get_observe","","",8,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"from_bytes","","Decodes a byte slice and construct the equivalent Packet.",8,null],[11,"to_bytes","","Returns a vector of bytes representing the Packet.",8,{"i":[{"n":"self"}],"o":{"g":["vec","packageerror"],"n":"result"}}],[8,"IsMessage","coap::message","",null,null],[10,"get_message","","",14,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[10,"get_mut_message","","",14,{"i":[{"n":"self"}],"o":{"n":"packet"}}],[10,"get_header","","",14,{"i":[{"n":"self"}],"o":{"n":"header"}}],[10,"get_mut_header","","",14,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"set_token","","",14,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"get_token","","",14,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_option","","",14,{"i":[{"n":"self"},{"n":"coapoption"},{"g":["vec"],"n":"linkedlist"}]}],[11,"set_payload","","",14,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"add_option","","",14,{"i":[{"n":"self"},{"n":"coapoption"},{"g":["u8"],"n":"vec"}]}],[11,"get_option","","",14,{"i":[{"n":"self"},{"n":"coapoption"}],"o":{"g":["linkedlist"],"n":"option"}}],[11,"clear_option","","",14,{"i":[{"n":"self"},{"n":"coapoption"}]}],[11,"set_observe","","",14,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"get_observe","","",14,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"get_message_id","","",14,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"set_message_id","","",14,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"set_version","","",14,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"get_version","","",14,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"set_type","","",14,{"i":[{"n":"self"},{"n":"messagetype"}]}],[11,"get_type","","",14,{"i":[{"n":"self"}],"o":{"n":"messagetype"}}],[11,"get_code","","",14,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_code","","",14,{"i":[{"n":"self"},{"n":"str"}]}],[0,"client","coap","",null,null],[3,"CoAPClient","coap::client","",null,null],[11,"new_with_specific_source","","Create a CoAP client with the specific source and peer address.",15,{"i":[{"n":"a"},{"n":"b"}],"o":{"g":["coapclient"],"n":"result"}}],[11,"new","","Create a CoAP client with the peer address.",15,{"i":[{"n":"a"}],"o":{"g":["coapclient"],"n":"result"}}],[11,"get","","Execute a get request",15,{"i":[{"n":"str"}],"o":{"g":["coapresponse"],"n":"result"}}],[11,"get_with_timeout","","Execute a get request with the coap url and a specific timeout.",15,{"i":[{"n":"str"},{"n":"duration"}],"o":{"g":["coapresponse"],"n":"result"}}],[11,"observe","","Observe a resource with the handler",15,{"i":[{"n":"self"},{"n":"str"},{"n":"h"}],"o":{"n":"result"}}],[11,"unobserve","","Stop observing",15,{"i":[{"n":"self"}]}],[11,"request_with_timeout","","Execute a request with the coap url and a specific timeout. Default timeout is 5s.",15,{"i":[{"n":"str"},{"g":["duration"],"n":"option"}],"o":{"g":["coapresponse"],"n":"result"}}],[11,"request","","Execute a request with the coap url.",15,{"i":[{"n":"str"}],"o":{"g":["coapresponse"],"n":"result"}}],[11,"send","","Execute a request.",15,{"i":[{"n":"self"},{"n":"coaprequest"}],"o":{"n":"result"}}],[11,"receive","","Receive a response.",15,{"i":[{"n":"self"}],"o":{"g":["coapresponse"],"n":"result"}}],[11,"set_receive_timeout","","Set the receive timeout.",15,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"drop","","",15,{"i":[{"n":"self"}]}],[0,"server","coap","",null,null],[3,"QueuedMessage","coap::server","",null,null],[12,"address","","",16,null],[12,"message","","",16,null],[3,"CoAPServer","","",null,null],[4,"CoAPServerError","","",null,null],[13,"NetworkError","","",17,null],[13,"EventLoopError","","",17,null],[13,"AnotherHandlerIsRunning","","",17,null],[6,"TxQueue","","",null,null],[8,"CoAPHandler","","",null,null],[10,"handle","","",18,{"i":[{"n":"self"},{"n":"coaprequest"}],"o":{"g":["coapresponse"],"n":"option"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a CoAP server listening on the given address.",19,{"i":[{"n":"a"}],"o":{"g":["coapserver"],"n":"result"}}],[11,"handle","","Starts handling requests with the handler",19,{"i":[{"n":"self"},{"n":"h"}],"o":{"g":["coapservererror"],"n":"result"}}],[11,"stop","","Stop the server.",19,{"i":[{"n":"self"}]}],[11,"set_worker_num","","Set the number of threads for handling requests",19,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"drop","","",19,{"i":[{"n":"self"}]}]],"paths":[[3,"Header"],[4,"MessageClass"],[4,"RequestType"],[4,"ResponseType"],[4,"MessageType"],[3,"HeaderRaw"],[3,"CoAPRequest"],[3,"CoAPResponse"],[3,"Packet"],[4,"CoAPOption"],[4,"ContentFormat"],[4,"ObserveOption"],[4,"PackageError"],[4,"ParseError"],[8,"IsMessage"],[3,"CoAPClient"],[3,"QueuedMessage"],[4,"CoAPServerError"],[8,"CoAPHandler"],[3,"CoAPServer"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",1,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_pin_mut","","Converts from `Option<T>` to `Option<PinMut<'_, T>>`",0,{"i":[{"g":["option"],"n":"pinmut"}],"o":{"g":["pinmut"],"n":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",0,{"i":[{"n":"self"},{"n":"u"},{"n":"f"}],"o":{"n":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",0,{"i":[{"n":"self"},{"n":"d"},{"n":"f"}],"o":{"n":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",0,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",0,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"into_result","","",0,{"i":[{"n":"self"}],"o":{"g":["noneerror"],"n":"result"}}],[11,"from_ok","","",0,{"i":[{"n":"t"}],"o":{"n":"option"}}],[11,"from_error","","",0,{"i":[{"n":"noneerror"}],"o":{"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","Returns [`None`].",0,{"o":{"n":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"ordering"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",0,{"i":[{"n":"i"}],"o":{"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"hash","","",0,null]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"i":[{"n":"str"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"i":[{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"i":[{"n":"str"},{"n":"flags"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"i":[{"n":"t"}]}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"arpreq","","",null,null],[12,"arp_pa","","",37,null],[12,"arp_ha","","",37,null],[12,"arp_flags","","",37,null],[12,"arp_netmask","","",37,null],[12,"arp_dev","","",37,null],[3,"arpreq_old","","",null,null],[12,"arp_pa","","",38,null],[12,"arp_ha","","",38,null],[12,"arp_flags","","",38,null],[12,"arp_netmask","","",38,null],[3,"arphdr","","",null,null],[12,"ar_hrd","","",39,null],[12,"ar_pro","","",39,null],[12,"ar_hln","","",39,null],[12,"ar_pln","","",39,null],[12,"ar_op","","",39,null],[3,"dirent","","",null,null],[12,"d_ino","","",40,null],[12,"d_off","","",40,null],[12,"d_reclen","","",40,null],[12,"d_type","","",40,null],[12,"d_name","","",40,null],[3,"dirent64","","",null,null],[12,"d_ino","","",41,null],[12,"d_off","","",41,null],[12,"d_reclen","","",41,null],[12,"d_type","","",41,null],[12,"d_name","","",41,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",42,null],[12,"rlim_max","","",42,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",43,null],[12,"gl_pathv","","",43,null],[12,"gl_offs","","",43,null],[12,"gl_flags","","",43,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",44,null],[12,"pw_passwd","","",44,null],[12,"pw_uid","","",44,null],[12,"pw_gid","","",44,null],[12,"pw_gecos","","",44,null],[12,"pw_dir","","",44,null],[12,"pw_shell","","",44,null],[3,"spwd","","",null,null],[12,"sp_namp","","",45,null],[12,"sp_pwdp","","",45,null],[12,"sp_lstchg","","",45,null],[12,"sp_min","","",45,null],[12,"sp_max","","",45,null],[12,"sp_warn","","",45,null],[12,"sp_inact","","",45,null],[12,"sp_expire","","",45,null],[12,"sp_flag","","",45,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",46,null],[12,"dqb_bsoftlimit","","",46,null],[12,"dqb_curspace","","",46,null],[12,"dqb_ihardlimit","","",46,null],[12,"dqb_isoftlimit","","",46,null],[12,"dqb_curinodes","","",46,null],[12,"dqb_btime","","",46,null],[12,"dqb_itime","","",46,null],[12,"dqb_valid","","",46,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",47,null],[12,"ssi_errno","","",47,null],[12,"ssi_code","","",47,null],[12,"ssi_pid","","",47,null],[12,"ssi_uid","","",47,null],[12,"ssi_fd","","",47,null],[12,"ssi_tid","","",47,null],[12,"ssi_band","","",47,null],[12,"ssi_overrun","","",47,null],[12,"ssi_trapno","","",47,null],[12,"ssi_status","","",47,null],[12,"ssi_int","","",47,null],[12,"ssi_ptr","","",47,null],[12,"ssi_utime","","",47,null],[12,"ssi_stime","","",47,null],[12,"ssi_addr","","",47,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",48,null],[12,"it_value","","",48,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",49,null],[12,"mq_maxmsg","","",49,null],[12,"mq_msgsize","","",49,null],[12,"mq_curmsgs","","",49,null],[3,"packet_mreq","","",null,null],[12,"mr_ifindex","","",50,null],[12,"mr_type","","",50,null],[12,"mr_alen","","",50,null],[12,"mr_address","","",50,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",51,null],[12,"if_name","","",51,null],[3,"msginfo","","",null,null],[12,"msgpool","","",52,null],[12,"msgmap","","",52,null],[12,"msgmax","","",52,null],[12,"msgmnb","","",52,null],[12,"msgmni","","",52,null],[12,"msgssz","","",52,null],[12,"msgtql","","",52,null],[12,"msgseg","","",52,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",53,null],[12,"msg_len","","",53,null],[3,"sembuf","","",null,null],[12,"sem_num","","",54,null],[12,"sem_op","","",54,null],[12,"sem_flg","","",54,null],[3,"input_event","","",null,null],[12,"time","","",55,null],[12,"type_","","",55,null],[12,"code","","",55,null],[12,"value","","",55,null],[3,"input_id","","",null,null],[12,"bustype","","",56,null],[12,"vendor","","",56,null],[12,"product","","",56,null],[12,"version","","",56,null],[3,"input_absinfo","","",null,null],[12,"value","","",57,null],[12,"minimum","","",57,null],[12,"maximum","","",57,null],[12,"fuzz","","",57,null],[12,"flat","","",57,null],[12,"resolution","","",57,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",58,null],[12,"len","","",58,null],[12,"index","","",58,null],[12,"keycode","","",58,null],[12,"scancode","","",58,null],[3,"input_mask","","",null,null],[12,"type_","","",59,null],[12,"codes_size","","",59,null],[12,"codes_ptr","","",59,null],[3,"ff_replay","","",null,null],[12,"length","","",60,null],[12,"delay","","",60,null],[3,"ff_trigger","","",null,null],[12,"button","","",61,null],[12,"interval","","",61,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",62,null],[12,"attack_level","","",62,null],[12,"fade_length","","",62,null],[12,"fade_level","","",62,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",63,null],[12,"envelope","","",63,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",64,null],[12,"end_level","","",64,null],[12,"envelope","","",64,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",65,null],[12,"left_saturation","","",65,null],[12,"right_coeff","","",65,null],[12,"left_coeff","","",65,null],[12,"deadband","","",65,null],[12,"center","","",65,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",66,null],[12,"period","","",66,null],[12,"magnitude","","",66,null],[12,"offset","","",66,null],[12,"phase","","",66,null],[12,"envelope","","",66,null],[12,"custom_len","","",66,null],[12,"custom_data","","",66,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",67,null],[12,"weak_magnitude","","",67,null],[3,"ff_effect","","",null,null],[12,"type_","","",68,null],[12,"id","","",68,null],[12,"direction","","",68,null],[12,"trigger","","",68,null],[12,"replay","","",68,null],[12,"u","","",68,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",69,null],[12,"dlpi_name","","",69,null],[12,"dlpi_phdr","","",69,null],[12,"dlpi_phnum","","",69,null],[12,"dlpi_adds","","",69,null],[12,"dlpi_subs","","",69,null],[12,"dlpi_tls_modid","","",69,null],[12,"dlpi_tls_data","","",69,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",70,null],[12,"p_offset","","",70,null],[12,"p_vaddr","","",70,null],[12,"p_paddr","","",70,null],[12,"p_filesz","","",70,null],[12,"p_memsz","","",70,null],[12,"p_flags","","",70,null],[12,"p_align","","",70,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",71,null],[12,"p_flags","","",71,null],[12,"p_offset","","",71,null],[12,"p_vaddr","","",71,null],[12,"p_paddr","","",71,null],[12,"p_filesz","","",71,null],[12,"p_memsz","","",71,null],[12,"p_align","","",71,null],[3,"ucred","","",null,null],[12,"pid","","",72,null],[12,"uid","","",72,null],[12,"gid","","",72,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",73,null],[12,"mnt_dir","","",73,null],[12,"mnt_type","","",73,null],[12,"mnt_opts","","",73,null],[12,"mnt_freq","","",73,null],[12,"mnt_passno","","",73,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",74,null],[12,"version","","",74,null],[12,"reserved","","",74,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",75,null],[12,"ipi6_ifindex","","",75,null],[3,"arpd_request","","",null,null],[12,"req","","",76,null],[12,"ip","","",76,null],[12,"dev","","",76,null],[12,"stamp","","",76,null],[12,"updated","","",76,null],[12,"ha","","",76,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",77,null],[12,"aio_lio_opcode","","",77,null],[12,"aio_reqprio","","",77,null],[12,"aio_buf","","",77,null],[12,"aio_nbytes","","",77,null],[12,"aio_sigevent","","",77,null],[12,"aio_offset","","",77,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",78,null],[12,"e_exit","","",78,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",79,null],[12,"tv_usec","","",79,null],[3,"utmpx","","",null,null],[12,"ut_type","","",80,null],[12,"ut_pid","","",80,null],[12,"ut_line","","",80,null],[12,"ut_id","","",80,null],[12,"ut_user","","",80,null],[12,"ut_host","","",80,null],[12,"ut_exit","","",80,null],[12,"ut_session","","",80,null],[12,"ut_tv","","",80,null],[12,"ut_addr_v6","","",80,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",81,null],[12,"sa_mask","","",81,null],[12,"sa_flags","","",81,null],[12,"sa_restorer","","",81,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",82,null],[12,"ss_flags","","",82,null],[12,"ss_size","","",82,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",83,null],[12,"si_errno","","",83,null],[12,"si_code","","",83,null],[12,"_pad","","",83,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",84,null],[12,"gl_pathv","","",84,null],[12,"gl_offs","","",84,null],[12,"gl_flags","","",84,null],[3,"statfs","","",null,null],[12,"f_type","","",85,null],[12,"f_bsize","","",85,null],[12,"f_blocks","","",85,null],[12,"f_bfree","","",85,null],[12,"f_bavail","","",85,null],[12,"f_files","","",85,null],[12,"f_ffree","","",85,null],[12,"f_fsid","","",85,null],[12,"f_namelen","","",85,null],[12,"f_frsize","","",85,null],[3,"msghdr","","",null,null],[12,"msg_name","","",86,null],[12,"msg_namelen","","",86,null],[12,"msg_iov","","",86,null],[12,"msg_iovlen","","",86,null],[12,"msg_control","","",86,null],[12,"msg_controllen","","",86,null],[12,"msg_flags","","",86,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",87,null],[12,"cmsg_level","","",87,null],[12,"cmsg_type","","",87,null],[3,"termios","","",null,null],[12,"c_iflag","","",88,null],[12,"c_oflag","","",88,null],[12,"c_cflag","","",88,null],[12,"c_lflag","","",88,null],[12,"c_line","","",88,null],[12,"c_cc","","",88,null],[12,"c_ispeed","","",88,null],[12,"c_ospeed","","",88,null],[3,"flock","","",null,null],[12,"l_type","","",89,null],[12,"l_whence","","",89,null],[12,"l_start","","",89,null],[12,"l_len","","",89,null],[12,"l_pid","","",89,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",90,null],[12,"ordblks","","",90,null],[12,"smblks","","",90,null],[12,"hblks","","",90,null],[12,"hblkhd","","",90,null],[12,"usmblks","","",90,null],[12,"fsmblks","","",90,null],[12,"uordblks","","",90,null],[12,"fordblks","","",90,null],[12,"keepcost","","",90,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",91,null],[12,"nlmsg_type","","",91,null],[12,"nlmsg_flags","","",91,null],[12,"nlmsg_seq","","",91,null],[12,"nlmsg_pid","","",91,null],[3,"nlmsgerr","","",null,null],[12,"error","","",92,null],[12,"msg","","",92,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",93,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",94,null],[12,"nm_block_nr","","",94,null],[12,"nm_frame_size","","",94,null],[12,"nm_frame_nr","","",94,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",95,null],[12,"nm_len","","",95,null],[12,"nm_group","","",95,null],[12,"nm_pid","","",95,null],[12,"nm_uid","","",95,null],[12,"nm_gid","","",95,null],[3,"nlattr","","",null,null],[12,"nla_len","","",96,null],[12,"nla_type","","",96,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",97,null],[12,"rt_dst","","",97,null],[12,"rt_gateway","","",97,null],[12,"rt_genmask","","",97,null],[12,"rt_flags","","",97,null],[12,"rt_pad2","","",97,null],[12,"rt_pad3","","",97,null],[12,"rt_tos","","",97,null],[12,"rt_class","","",97,null],[12,"rt_pad4","","",97,null],[12,"rt_metric","","",97,null],[12,"rt_dev","","",97,null],[12,"rt_mtu","","",97,null],[12,"rt_window","","",97,null],[12,"rt_irtt","","",97,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",98,null],[12,"loads","","",98,null],[12,"totalram","","",98,null],[12,"freeram","","",98,null],[12,"sharedram","","",98,null],[12,"bufferram","","",98,null],[12,"totalswap","","",98,null],[12,"freeswap","","",98,null],[12,"procs","","",98,null],[12,"pad","","",98,null],[12,"totalhigh","","",98,null],[12,"freehigh","","",98,null],[12,"mem_unit","","",98,null],[12,"_f","","",98,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",99,null],[12,"msg_stime","","",99,null],[12,"msg_rtime","","",99,null],[12,"msg_ctime","","",99,null],[12,"msg_qnum","","",99,null],[12,"msg_qbytes","","",99,null],[12,"msg_lspid","","",99,null],[12,"msg_lrpid","","",99,null],[3,"stat","","",null,null],[12,"st_dev","","",100,null],[12,"st_ino","","",100,null],[12,"st_nlink","","",100,null],[12,"st_mode","","",100,null],[12,"st_uid","","",100,null],[12,"st_gid","","",100,null],[12,"st_rdev","","",100,null],[12,"st_size","","",100,null],[12,"st_blksize","","",100,null],[12,"st_blocks","","",100,null],[12,"st_atime","","",100,null],[12,"st_atime_nsec","","",100,null],[12,"st_mtime","","",100,null],[12,"st_mtime_nsec","","",100,null],[12,"st_ctime","","",100,null],[12,"st_ctime_nsec","","",100,null],[3,"stat64","","",null,null],[12,"st_dev","","",101,null],[12,"st_ino","","",101,null],[12,"st_nlink","","",101,null],[12,"st_mode","","",101,null],[12,"st_uid","","",101,null],[12,"st_gid","","",101,null],[12,"st_rdev","","",101,null],[12,"st_size","","",101,null],[12,"st_blksize","","",101,null],[12,"st_blocks","","",101,null],[12,"st_atime","","",101,null],[12,"st_atime_nsec","","",101,null],[12,"st_mtime","","",101,null],[12,"st_mtime_nsec","","",101,null],[12,"st_ctime","","",101,null],[12,"st_ctime_nsec","","",101,null],[3,"statfs64","","",null,null],[12,"f_type","","",102,null],[12,"f_bsize","","",102,null],[12,"f_blocks","","",102,null],[12,"f_bfree","","",102,null],[12,"f_bavail","","",102,null],[12,"f_files","","",102,null],[12,"f_ffree","","",102,null],[12,"f_fsid","","",102,null],[12,"f_namelen","","",102,null],[12,"f_frsize","","",102,null],[12,"f_flags","","",102,null],[12,"f_spare","","",102,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",103,null],[12,"f_frsize","","",103,null],[12,"f_blocks","","",103,null],[12,"f_bfree","","",103,null],[12,"f_bavail","","",103,null],[12,"f_files","","",103,null],[12,"f_ffree","","",103,null],[12,"f_favail","","",103,null],[12,"f_fsid","","",103,null],[12,"f_flag","","",103,null],[12,"f_namemax","","",103,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",104,null],[12,"exponent","","",104,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",105,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",106,null],[12,"swd","","",106,null],[12,"ftw","","",106,null],[12,"fop","","",106,null],[12,"rip","","",106,null],[12,"rdp","","",106,null],[12,"mxcsr","","",106,null],[12,"mxcr_mask","","",106,null],[12,"_st","","",106,null],[12,"_xmm","","",106,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",107,null],[12,"swd","","",107,null],[12,"ftw","","",107,null],[12,"fop","","",107,null],[12,"rip","","",107,null],[12,"rdp","","",107,null],[12,"mxcsr","","",107,null],[12,"mxcr_mask","","",107,null],[12,"st_space","","",107,null],[12,"xmm_space","","",107,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",108,null],[12,"r14","","",108,null],[12,"r13","","",108,null],[12,"r12","","",108,null],[12,"rbp","","",108,null],[12,"rbx","","",108,null],[12,"r11","","",108,null],[12,"r10","","",108,null],[12,"r9","","",108,null],[12,"r8","","",108,null],[12,"rax","","",108,null],[12,"rcx","","",108,null],[12,"rdx","","",108,null],[12,"rsi","","",108,null],[12,"rdi","","",108,null],[12,"orig_rax","","",108,null],[12,"rip","","",108,null],[12,"cs","","",108,null],[12,"eflags","","",108,null],[12,"rsp","","",108,null],[12,"ss","","",108,null],[12,"fs_base","","",108,null],[12,"gs_base","","",108,null],[12,"ds","","",108,null],[12,"es","","",108,null],[12,"fs","","",108,null],[12,"gs","","",108,null],[3,"user","","",null,null],[12,"regs","","",109,null],[12,"u_fpvalid","","",109,null],[12,"i387","","",109,null],[12,"u_tsize","","",109,null],[12,"u_dsize","","",109,null],[12,"u_ssize","","",109,null],[12,"start_code","","",109,null],[12,"start_stack","","",109,null],[12,"signal","","",109,null],[12,"u_ar0","","",109,null],[12,"u_fpstate","","",109,null],[12,"magic","","",109,null],[12,"u_comm","","",109,null],[12,"u_debugreg","","",109,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",110,null],[12,"fpregs","","",110,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",111,null],[12,"uc_link","","",111,null],[12,"uc_stack","","",111,null],[12,"uc_mcontext","","",111,null],[12,"uc_sigmask","","",111,null],[3,"ipc_perm","","",null,null],[12,"__key","","",112,null],[12,"uid","","",112,null],[12,"gid","","",112,null],[12,"cuid","","",112,null],[12,"cgid","","",112,null],[12,"mode","","",112,null],[12,"__seq","","",112,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",113,null],[12,"shm_segsz","","",113,null],[12,"shm_atime","","",113,null],[12,"shm_dtime","","",113,null],[12,"shm_ctime","","",113,null],[12,"shm_cpid","","",113,null],[12,"shm_lpid","","",113,null],[12,"shm_nattch","","",113,null],[3,"termios2","","",null,null],[12,"c_iflag","","",114,null],[12,"c_oflag","","",114,null],[12,"c_cflag","","",114,null],[12,"c_lflag","","",114,null],[12,"c_line","","",114,null],[12,"c_cc","","",114,null],[12,"c_ispeed","","",114,null],[12,"c_ospeed","","",114,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",115,null],[12,"f_frsize","","",115,null],[12,"f_blocks","","",115,null],[12,"f_bfree","","",115,null],[12,"f_bavail","","",115,null],[12,"f_files","","",115,null],[12,"f_ffree","","",115,null],[12,"f_favail","","",115,null],[12,"f_fsid","","",115,null],[12,"f_flag","","",115,null],[12,"f_namemax","","",115,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_CLASS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPTOS_PREC","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"RT_LOCALADDR","","",null,{"i":[{"n":"u32"}],"o":{"n":"bool"}}],[5,"NLA_ALIGN","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"fdopendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"mallinfo"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"nlmsghdr"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"nlmsgerr"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"nl_pktinfo"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_req"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_hdr"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"nlattr"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"rtentry"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"packet_mreq"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"posix_spawn_file_actions_t"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"posix_spawnattr_t"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"genlmsghdr"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"in6_pktinfo"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"arpd_request"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"in_pktinfo"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"in6_rtmsg"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"arpreq"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"arpreq_old"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"arphdr"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"ARPOP_REQUEST","","",null,null],[17,"ARPOP_REPLY","","",null,null],[17,"ATF_COM","","",null,null],[17,"ATF_PERM","","",null,null],[17,"ATF_PUBL","","",null,null],[17,"ATF_USETRAILERS","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ARPOP_RREQUEST","","",null,null],[17,"ARPOP_RREPLY","","",null,null],[17,"ARPOP_InREQUEST","","",null,null],[17,"ARPOP_InREPLY","","",null,null],[17,"ARPOP_NAK","","",null,null],[17,"ATF_NETMASK","","",null,null],[17,"ATF_DONTPUB","","",null,null],[17,"ARPHRD_NETROM","","",null,null],[17,"ARPHRD_ETHER","","",null,null],[17,"ARPHRD_EETHER","","",null,null],[17,"ARPHRD_AX25","","",null,null],[17,"ARPHRD_PRONET","","",null,null],[17,"ARPHRD_CHAOS","","",null,null],[17,"ARPHRD_IEEE802","","",null,null],[17,"ARPHRD_ARCNET","","",null,null],[17,"ARPHRD_APPLETLK","","",null,null],[17,"ARPHRD_DLCI","","",null,null],[17,"ARPHRD_ATM","","",null,null],[17,"ARPHRD_METRICOM","","",null,null],[17,"ARPHRD_IEEE1394","","",null,null],[17,"ARPHRD_EUI64","","",null,null],[17,"ARPHRD_INFINIBAND","","",null,null],[17,"ARPHRD_SLIP","","",null,null],[17,"ARPHRD_CSLIP","","",null,null],[17,"ARPHRD_SLIP6","","",null,null],[17,"ARPHRD_CSLIP6","","",null,null],[17,"ARPHRD_RSRVD","","",null,null],[17,"ARPHRD_ADAPT","","",null,null],[17,"ARPHRD_ROSE","","",null,null],[17,"ARPHRD_X25","","",null,null],[17,"ARPHRD_HWX25","","",null,null],[17,"ARPHRD_PPP","","",null,null],[17,"ARPHRD_CISCO","","",null,null],[17,"ARPHRD_HDLC","","",null,null],[17,"ARPHRD_LAPB","","",null,null],[17,"ARPHRD_DDCMP","","",null,null],[17,"ARPHRD_RAWHDLC","","",null,null],[17,"ARPHRD_TUNNEL","","",null,null],[17,"ARPHRD_TUNNEL6","","",null,null],[17,"ARPHRD_FRAD","","",null,null],[17,"ARPHRD_SKIP","","",null,null],[17,"ARPHRD_LOOPBACK","","",null,null],[17,"ARPHRD_LOCALTLK","","",null,null],[17,"ARPHRD_FDDI","","",null,null],[17,"ARPHRD_BIF","","",null,null],[17,"ARPHRD_SIT","","",null,null],[17,"ARPHRD_IPDDP","","",null,null],[17,"ARPHRD_IPGRE","","",null,null],[17,"ARPHRD_PIMREG","","",null,null],[17,"ARPHRD_HIPPI","","",null,null],[17,"ARPHRD_ASH","","",null,null],[17,"ARPHRD_ECONET","","",null,null],[17,"ARPHRD_IRDA","","",null,null],[17,"ARPHRD_FCPP","","",null,null],[17,"ARPHRD_FCAL","","",null,null],[17,"ARPHRD_FCPL","","",null,null],[17,"ARPHRD_FCFABRIC","","",null,null],[17,"ARPHRD_IEEE802_TR","","",null,null],[17,"ARPHRD_IEEE80211","","",null,null],[17,"ARPHRD_IEEE80211_PRISM","","",null,null],[17,"ARPHRD_IEEE80211_RADIOTAP","","",null,null],[17,"ARPHRD_IEEE802154","","",null,null],[17,"ARPHRD_VOID","","",null,null],[17,"ARPHRD_NONE","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"PACKET_ADD_MEMBERSHIP","","",null,null],[17,"PACKET_DROP_MEMBERSHIP","","",null,null],[17,"PACKET_MR_MULTICAST","","",null,null],[17,"PACKET_MR_PROMISC","","",null,null],[17,"PACKET_MR_ALLMULTI","","",null,null],[17,"PACKET_MR_UNICAST","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"MAX_ADDR_LEN","","",null,null],[17,"ARPD_UPDATE","","",null,null],[17,"ARPD_LOOKUP","","",null,null],[17,"ARPD_FLUSH","","",null,null],[17,"ATF_MAGIC","","",null,null],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",null,null],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"o":{"n":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"o":{"g":["box","shutdownloggererror"],"n":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"o":{"g":["shutdownloggererror"],"n":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"i":[{"n":"self"},{"n":"logmetadata"}],"o":{"n":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"i":[{"n":"self"},{"n":"logrecord"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"ordering"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["loglevel"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"o":{"n":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"ordering"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["loglevelfilter"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"o":{"n":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"i":[{"n":"self"}],"o":{"g":["loglevel"],"n":"option"}}],[11,"args","","The message body.",3,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"level","","The verbosity level of the message.",4,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"module_path","","The module path of the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"file","","The source file containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"line","","The line containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"i":[{"n":"self"},{"n":"loglevelfilter"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Ipv4Addr","mio","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",0,null],[12,"token","","",0,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",1,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",2,null],[13,"V6","","",2,null],[4,"NotifyError","","",null,null],[13,"Io","","",3,null],[13,"Full","","",3,null],[13,"Closed","","",3,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",4,{"i":[{"n":"usize"}],"o":{"n":"queue"}}],[11,"push","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"pop","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[6,"Slab","","",null,null],[11,"eq","mio","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"pollopt"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"ordering"}}],[11,"edge","","",5,{"o":{"n":"pollopt"}}],[11,"empty","","",5,{"o":{"n":"pollopt"}}],[11,"level","","",5,{"o":{"n":"pollopt"}}],[11,"oneshot","","",5,{"o":{"n":"pollopt"}}],[11,"all","","",5,{"o":{"n":"pollopt"}}],[11,"is_edge","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_level","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_oneshot","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bits","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"insert","","",5,{"i":[{"n":"self"},{"n":"pollopt"}]}],[11,"remove","","",5,{"i":[{"n":"self"},{"n":"pollopt"}]}],[11,"bitor","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"bitxor","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"bitand","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"not","","",5,{"i":[{"n":"self"}],"o":{"n":"pollopt"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"eventset"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"ordering"}}],[11,"none","","",6,{"o":{"n":"eventset"}}],[11,"readable","","",6,{"o":{"n":"eventset"}}],[11,"writable","","",6,{"o":{"n":"eventset"}}],[11,"error","","",6,{"o":{"n":"eventset"}}],[11,"hup","","",6,{"o":{"n":"eventset"}}],[11,"all","","",6,{"o":{"n":"eventset"}}],[11,"is_readable","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_writable","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_error","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_hup","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"insert","","",6,{"i":[{"n":"self"},{"n":"eventset"}]}],[11,"remove","","",6,{"i":[{"n":"self"},{"n":"eventset"}]}],[11,"bits","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"bitor","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"bitxor","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"bitand","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"sub","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"not","","",6,{"i":[{"n":"self"}],"o":{"n":"eventset"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ioevent"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"ioevent"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"ioevent"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new IoEvent.",0,{"i":[{"n":"eventset"},{"n":"token"}],"o":{"n":"ioevent"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"eventloopconfig"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new configuration for the event loop with all default options specified.",7,{"o":{"n":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event loop's notification channel before a send will fail.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of the event loop.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"timer_tick_ms","","",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"timer_wheel_size","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"timer_capacity","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"default","","",7,{"o":{"n":"eventloopconfig"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The event loop will not be running yet.",8,{"o":{"g":["eventloop"],"n":"result"}}],[11,"configured","","",8,{"i":[{"n":"eventloopconfig"}],"o":{"g":["eventloop"],"n":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a thread-safe way, waking up the event loop if needed.",8,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the duration has been reached, Handler::timeout will be invoked passing in the supplied token.",8,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it will not be triggered in the future.",8,{"i":[{"n":"self"},{"n":"timeout"}],"o":{"n":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the current iteration.",8,{"i":[{"n":"self"}]}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either stopped or is scheduled to stop on the next tick.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever any of the registered handles are ready.",8,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the handler if any of the registered handles become ready during that time.",8,{"i":[{"n":"self"},{"n":"h"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"send","","",9,{"i":[{"n":"self"},{"n":"m"}],"o":{"g":["notifyerror"],"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["ipaddr","addrparseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"new","","",10,{"o":{"g":["poll"],"n":"result"}}],[11,"register","","",10,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",10,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",10,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"poll","","",10,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"g":["usize"],"n":"result"}}],[11,"event","","",10,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ioevent"}}],[11,"events","","",10,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"g":["ioevent"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",12,{"o":{"g":["selector"],"n":"result"}}],[11,"id","","",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"select","","Wait for events from the OS",12,{"i":[{"n":"self"},{"n":"events"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"n":"result"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_fd","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"from","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"from_raw_fd","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"as_raw_fd","","",13,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"register","","",13,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",13,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",13,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",13,{"i":[{"n":"self"}]}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"timeout"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"ordering"}}],[11,"hash","","",1,null],[11,"as_usize","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_usize","","",1,{"i":[{"n":"usize"}],"o":{"n":"token"}}],[11,"as_usize","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",16,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",16,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",16,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",17,null],[5,"pipe","","",null,{"o":{"n":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_read","","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_write","","",19,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",20,null],[16,"Message","","",20,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"i":[{"n":"self"},{"n":"eventloop"},{"n":"token"},{"n":"eventset"}]}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[8,"TryRead","","",null,null],[11,"try_read_buf","mio::prelude","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_read","mio","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","mio::prelude","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_write","mio","",19,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",21,null],[10,"accept","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",22,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",22,{"o":{"n":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",22,{"o":{"n":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",22,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",22,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",22,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"from_str","","",22,{"i":[{"n":"str"}],"o":{"g":["ipv4addr","addrparseerror"],"n":"result"}}],[11,"from_str","","",23,{"i":[{"n":"str"}],"o":{"g":["ipv6addr","addrparseerror"],"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"bool"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"n":"bool"}}],[11,"eq","mio::tcp","",16,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"bool"}}],[11,"eq","mio","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"cmp","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"n":"ordering"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"ordering"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"clone","mio::tcp","",16,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"fmt","mio","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",23,null],[11,"from","","Convert a host byte order `u32` into an `Ipv4Addr`.",22,{"i":[{"n":"u32"}],"o":{"n":"ipv4addr"}}],[11,"from","","",23,null],[11,"from","","",23,{"i":[{"n":"u128"}],"o":{"n":"ipv6addr"}}],[11,"from","","Examples",22,null],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","mio::tcp","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","mio","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",23,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",23,{"o":{"n":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",23,{"o":{"n":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",23,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",23,{"i":[{"n":"self"}],"o":{"g":["ipv6multicastscope"],"n":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",23,{"i":[{"n":"self"}],"o":{"g":["ipv4addr"],"n":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",23,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"i":[{"n":"self"},{"n":"eventloop"},{"n":"token"},{"n":"eventset"}]}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"try_read_buf","mio::prelude","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"try_write_buf","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"fmt","mio::tcp","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",24,{"i":[{"n":"socketaddr"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",24,{"i":[{"n":"tcpstream"},{"n":"socketaddr"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"peer_addr","","",24,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"local_addr","","",24,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",24,{"i":[{"n":"self"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"shutdown","","",24,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"set_nodelay","","",24,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"set_keepalive","","",24,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[11,"take_socket_error","","",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",24,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",24,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",24,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",25,{"i":[{"n":"socketaddr"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",25,{"i":[{"n":"tcplistener"},{"n":"socketaddr"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",25,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"local_addr","","",25,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",25,{"i":[{"n":"self"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"take_socket_error","","",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",25,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",25,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",25,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"accept","","",25,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"as_raw_fd","","",24,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",24,{"i":[{"n":"rawfd"}],"o":{"n":"tcpstream"}}],[11,"as_raw_fd","","",25,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",25,{"i":[{"n":"rawfd"}],"o":{"n":"tcplistener"}}],[11,"fmt","mio::udp","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",26,{"o":{"g":["udpsocket"],"n":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",26,{"o":{"g":["udpsocket"],"n":"result"}}],[11,"bound","","",26,{"i":[{"n":"socketaddr"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"bind","","",26,{"i":[{"n":"self"},{"n":"socketaddr"}],"o":{"n":"result"}}],[11,"local_addr","","",26,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",26,{"i":[{"n":"self"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"send_to","","",26,null],[11,"recv_from","","",26,null],[11,"set_broadcast","","",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"set_multicast_loop","","",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"join_multicast","","",26,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"leave_multicast","","",26,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_multicast_time_to_live","","",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"register","","",26,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",26,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",26,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",26,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",26,{"i":[{"n":"rawfd"}],"o":{"n":"udpsocket"}}],[11,"fmt","mio::unix","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"o":{"g":["unixsocket"],"n":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"listen","","Listen for incoming requests",27,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"try_clone","","",27,{"i":[{"n":"self"}],"o":{"g":["unixsocket"],"n":"result"}}],[11,"register","","",27,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",27,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",27,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","",28,{"i":[{"n":"p"}],"o":{"g":["unixstream"],"n":"result"}}],[11,"try_clone","","",28,{"i":[{"n":"self"}],"o":{"g":["unixstream"],"n":"result"}}],[11,"read_recv_fd","","",28,null],[11,"try_read_recv_fd","","",28,null],[11,"try_read_buf_recv_fd","","",28,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"write_send_fd","","",28,null],[11,"try_write_send_fd","","",28,null],[11,"try_write_buf_send_fd","","",28,{"i":[{"n":"self"},{"n":"b"},{"n":"rawfd"}],"o":{"g":["option"],"n":"result"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",28,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",28,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",28,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bind","","",29,{"i":[{"n":"p"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"accept","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"try_clone","","",29,{"i":[{"n":"self"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"register","","",29,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",29,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",29,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"accept","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",30,null],[11,"register","","",30,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",30,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",30,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"from","","",30,{"i":[{"n":"io"}],"o":{"n":"pipereader"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",31,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",31,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",31,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"from","","",31,{"i":[{"n":"io"}],"o":{"n":"pipewriter"}}],[11,"as_raw_fd","","",27,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",27,{"i":[{"n":"rawfd"}],"o":{"n":"unixsocket"}}],[11,"as_raw_fd","","",28,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",28,{"i":[{"n":"rawfd"}],"o":{"n":"unixstream"}}],[11,"as_raw_fd","","",29,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",29,{"i":[{"n":"rawfd"}],"o":{"n":"unixlistener"}}],[11,"as_raw_fd","","",30,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",30,{"i":[{"n":"rawfd"}],"o":{"n":"pipereader"}}],[11,"as_raw_fd","","",31,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",31,{"i":[{"n":"rawfd"}],"o":{"n":"pipewriter"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"register","","",17,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",17,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",17,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}]],"paths":[[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"Timeout"],[3,"TimerError"],[4,"Shutdown"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"i":[{"n":"self"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"i":[{"n":"self"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"o":{"g":["udpbuilder"],"n":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"o":{"g":["udpbuilder"],"n":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"from_raw_fd","","",0,{"i":[{"n":"c_int"}],"o":{"n":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_raw_fd","","",1,{"i":[{"n":"c_int"}],"o":{"n":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"reuse_port","net2","",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_port","","",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"reuse_port","","",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_port","","",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["ipv4addr"],"n":"result"}}],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[5,"from_i32","","",null,{"i":[{"n":"i32"}],"o":{"n":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"o":{"n":"i32"}}],[11,"fmt","nix","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"errno"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"errno"}],"o":{"n":"bool"}}],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"o":{"n":"self"}}],[11,"last","nix","",0,{"o":{"n":"self"}}],[11,"desc","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_i32","","",0,{"i":[{"n":"i32"}],"o":{"n":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",0,{"i":[{"n":"s"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"o":{"n":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[13,"F_OFD_SETLK","","",4,null],[13,"F_OFD_SETLKW","","",4,null],[13,"F_OFD_GETLK","","",4,null],[13,"F_ADD_SEALS","","",4,null],[13,"F_GET_SEALS","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"i":[{"n":"p"},{"n":"oflag"},{"n":"mode"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"fcntl","","",null,{"i":[{"n":"rawfd"},{"n":"fcntlarg"}],"o":{"g":["c_int"],"n":"result"}}],[5,"flock","","",null,{"i":[{"n":"rawfd"},{"n":"flockarg"}],"o":{"n":"result"}}],[5,"splice","","",null,{"i":[{"n":"rawfd"},{"g":["loff_t"],"n":"option"},{"n":"rawfd"},{"g":["loff_t"],"n":"option"},{"n":"usize"},{"n":"splicefflags"}],"o":{"g":["usize"],"n":"result"}}],[5,"tee","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"n":"usize"},{"n":"splicefflags"}],"o":{"g":["usize"],"n":"result"}}],[5,"vmsplice","","",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"default","","",3,{"o":{"n":"flock"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"splicefflags"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"o":{"n":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",6,{"o":{"n":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"i":[{"n":"c_uint"}],"o":{"g":["splicefflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"i":[{"n":"c_uint"}],"o":{"n":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"remove","","Removes the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"not","","Returns the complement of this set of flags.",6,{"i":[{"n":"self"}],"o":{"n":"splicefflags"}}],[11,"from_iter","","",6,{"i":[{"n":"t"}],"o":{"n":"splicefflags"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"oflag"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"o":{"n":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"o":{"n":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"i":[{"n":"c_int"}],"o":{"g":["oflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"i":[{"n":"c_int"}],"o":{"n":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"remove","","Removes the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"i":[{"n":"self"}],"o":{"n":"oflag"}}],[11,"from_iter","","",7,{"i":[{"n":"t"}],"o":{"n":"oflag"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"o":{"n":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"o":{"n":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,{"i":[{"n":"c_int"}],"o":{"g":["fdflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,{"i":[{"n":"c_int"}],"o":{"n":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"remove","","Removes the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",8,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"from_iter","","",8,{"i":[{"n":"t"}],"o":{"n":"fdflag"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"sealflag"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"o":{"n":"sealflag"}}],[11,"all","","Returns the set containing all flags.",9,{"o":{"n":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"i":[{"n":"c_int"}],"o":{"g":["sealflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"i":[{"n":"c_int"}],"o":{"n":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"remove","","Removes the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",9,{"i":[{"n":"self"}],"o":{"n":"sealflag"}}],[11,"from_iter","","",9,{"i":[{"n":"t"}],"o":{"n":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"i":[{"n":"option"},{"n":"p2"},{"n":"option"},{"n":"msflags"},{"n":"option"}],"o":{"n":"result"}}],[5,"umount","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"umount2","","",null,{"i":[{"n":"p"},{"n":"mntflags"}],"o":{"n":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",10,{"o":{"n":"msflags"}}],[11,"all","","Returns the set containing all flags.",10,{"o":{"n":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"i":[{"n":"self"}],"o":{"n":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"i":[{"n":"c_ulong"}],"o":{"g":["msflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"i":[{"n":"c_ulong"}],"o":{"n":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"remove","","Removes the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",10,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"from_iter","","",10,{"i":[{"n":"t"}],"o":{"n":"msflags"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"mntflags"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"o":{"n":"mntflags"}}],[11,"all","","Returns the set containing all flags.",11,{"o":{"n":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"i":[{"n":"c_int"}],"o":{"g":["mntflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"i":[{"n":"c_int"}],"o":{"n":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"remove","","Removes the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",11,{"i":[{"n":"self"}],"o":{"n":"mntflags"}}],[11,"from_iter","","",11,{"i":[{"n":"t"}],"o":{"n":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",12,null],[12,"mq_maxmsg","","",12,null],[12,"mq_msgsize","","",12,null],[12,"mq_curmsgs","","",12,null],[5,"mq_open","","",null,{"i":[{"n":"cstring"},{"n":"mq_oflag"},{"n":"mode"},{"g":["mqattr"],"n":"option"}],"o":{"g":["mqd"],"n":"result"}}],[5,"mq_unlink","","",null,{"i":[{"n":"cstring"}],"o":{"n":"result"}}],[5,"mq_close","","",null,{"i":[{"n":"mqd"}],"o":{"n":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored Returns the old attributes It is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"i":[{"n":"mqd"},{"n":"mqattr"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"mq_oflag"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"o":{"n":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",13,{"o":{"n":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"i":[{"n":"c_int"}],"o":{"g":["mq_oflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"i":[{"n":"c_int"}],"o":{"n":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"remove","","Removes the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",13,{"i":[{"n":"self"}],"o":{"n":"mq_oflag"}}],[11,"from_iter","","",13,{"i":[{"n":"t"}],"o":{"n":"mq_oflag"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"ordering"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"o":{"n":"fdflag"}}],[11,"all","","Returns the set containing all flags.",14,{"o":{"n":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"i":[{"n":"c_int"}],"o":{"g":["fdflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"i":[{"n":"c_int"}],"o":{"n":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"remove","","Removes the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",14,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"from_iter","","",14,{"i":[{"n":"t"}],"o":{"n":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"mqattr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"mqattr"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"mqattr"}],"o":{"n":"bool"}}],[11,"new","","",12,{"i":[{"n":"c_long"},{"n":"c_long"},{"n":"c_long"},{"n":"c_long"}],"o":{"n":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",15,null],[12,"events","","",15,null],[12,"revents","","",15,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"eventflags"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"o":{"n":"eventflags"}}],[11,"all","","Returns the set containing all flags.",16,{"o":{"n":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"i":[{"n":"self"}],"o":{"n":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"i":[{"n":"c_short"}],"o":{"g":["eventflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"i":[{"n":"c_short"}],"o":{"n":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"remove","","Removes the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",16,{"i":[{"n":"self"}],"o":{"n":"eventflags"}}],[11,"from_iter","","",16,{"i":[{"n":"t"}],"o":{"n":"eventflags"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"i":[{"n":"p"}],"o":{"g":["c_uint"],"n":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"i":[{"n":"isize"},{"n":"cpuset"}],"o":{"n":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"i":[{"n":"cloneflags"}],"o":{"n":"result"}}],[5,"setns","","",null,{"i":[{"n":"rawfd"},{"n":"cloneflags"}],"o":{"n":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"cloneflags"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"o":{"n":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",17,{"o":{"n":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"i":[{"n":"c_int"}],"o":{"g":["cloneflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"i":[{"n":"c_int"}],"o":{"n":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"remove","","Removes the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"not","","Returns the complement of this set of flags.",17,{"i":[{"n":"self"}],"o":{"n":"cloneflags"}}],[11,"from_iter","","",17,{"i":[{"n":"t"}],"o":{"n":"cloneflags"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"cpuset"}}],[11,"new","","",18,{"o":{"n":"cpuset"}}],[11,"set","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"unset","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",19,null],[12,"data","","",19,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",20,null],[13,"EpollCtlDel","","",20,null],[13,"EpollCtlMod","","",20,null],[5,"epoll_create","","",null,{"o":{"g":["rawfd"],"n":"result"}}],[5,"epoll_ctl","","",null,{"i":[{"n":"rawfd"},{"n":"epollop"},{"n":"rawfd"},{"n":"epollevent"}],"o":{"n":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"epolleventkind"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"le","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"gt","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"ge","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"o":{"n":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",21,{"o":{"n":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"i":[{"n":"u32"}],"o":{"g":["epolleventkind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"i":[{"n":"u32"}],"o":{"n":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"remove","","Removes the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"toggle","","Toggles the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",21,{"i":[{"n":"self"}],"o":{"n":"epolleventkind"}}],[11,"from_iter","","",21,{"i":[{"n":"t"}],"o":{"n":"epolleventkind"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"epollop"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"i":[{"n":"cstr"},{"n":"memfdcreateflag"}],"o":{"g":["rawfd"],"n":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"memfdcreateflag"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"o":{"n":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",22,{"o":{"n":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"i":[{"n":"c_uint"}],"o":{"g":["memfdcreateflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"i":[{"n":"c_uint"}],"o":{"n":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"remove","","Removes the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",22,{"i":[{"n":"self"}],"o":{"n":"memfdcreateflag"}}],[11,"from_iter","","",22,{"i":[{"n":"t"}],"o":{"n":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"g":["off_t"],"n":"option"},{"n":"usize"}],"o":{"g":["usize"],"n":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",23,null],[13,"SigIgn","","",23,null],[13,"Handler","","",23,null],[13,"SigAction","","",23,null],[5,"sigaction","","",null,{"i":[{"n":"signum"},{"n":"sigaction"}],"o":{"g":["sigaction"],"n":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"i":[{"n":"sigflag"},{"g":["sigset"],"n":"option"},{"g":["sigset"],"n":"option"}],"o":{"n":"result"}}],[5,"kill","","",null,{"i":[{"n":"pid_t"},{"n":"signum"}],"o":{"n":"result"}}],[5,"raise","","",null,{"i":[{"n":"signum"}],"o":{"n":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"saflag"}}],[11,"partial_cmp","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"le","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"gt","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"ge","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"cmp","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"o":{"n":"saflag"}}],[11,"all","","Returns the set containing all flags.",24,{"o":{"n":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"i":[{"n":"c_int"}],"o":{"g":["saflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"i":[{"n":"c_int"}],"o":{"n":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"remove","","Removes the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",24,{"i":[{"n":"self"}],"o":{"n":"saflag"}}],[11,"from_iter","","",24,{"i":[{"n":"t"}],"o":{"n":"saflag"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"sigflag"}}],[11,"partial_cmp","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"le","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"gt","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"ge","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"cmp","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"o":{"n":"sigflag"}}],[11,"all","","Returns the set containing all flags.",25,{"o":{"n":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"i":[{"n":"c_int"}],"o":{"g":["sigflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"i":[{"n":"c_int"}],"o":{"n":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"remove","","Removes the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"i":[{"n":"self"}],"o":{"n":"sigflag"}}],[11,"from_iter","","",25,{"i":[{"n":"t"}],"o":{"n":"sigflag"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sigset"}}],[11,"all","","",26,{"o":{"n":"sigset"}}],[11,"empty","","",26,{"o":{"n":"sigset"}}],[11,"add","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"n":"result"}}],[11,"remove","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"n":"result"}}],[11,"contains","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"g":["bool"],"n":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",26,{"o":{"g":["sigset"],"n":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",26,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"g":["sigset"],"n":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",26,{"i":[{"n":"self"}],"o":{"g":["signum"],"n":"result"}}],[11,"as_ref","","",26,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sighandler"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"sighandler"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"sighandler"}],"o":{"n":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",27,{"i":[{"n":"sighandler"},{"n":"saflag"},{"n":"sigset"}],"o":{"n":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",28,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",29,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",30,null],[12,"sa_data","","",30,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",31,null],[12,"sin_port","","",31,null],[12,"sin_addr","","",31,null],[12,"sin_zero","","",31,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",32,null],[12,"sin6_port","","",32,null],[12,"sin6_flowinfo","","",32,null],[12,"sin6_addr","","",32,null],[12,"sin6_scope_id","","",32,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",33,null],[12,"sun_path","","",33,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",34,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path, because it may not be null-terminated (unconnected and abstract sockets). Note that the actual sockaddr length is greater by size_of::<sa_family_t>().",null,null],[12,"0","","",35,null],[12,"1","","",35,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",36,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",37,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",38,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",39,null],[12,"imr_interface","","",39,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",40,null],[12,"ipv6mr_interface","","",40,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",41,null],[12,"address","","",41,null],[12,"flags","","",41,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",42,null],[12,"l_linger","","",42,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",43,null],[13,"Inet","","",43,null],[13,"Inet6","","",43,null],[13,"Netlink","","",43,null],[13,"Packet","","",43,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",44,null],[13,"Unix","","",44,null],[13,"Netlink","","",44,null],[4,"InetAddr","","",null,null],[13,"V4","","",45,null],[13,"V6","","",45,null],[4,"IpAddr","","",null,null],[13,"V4","","",46,null],[13,"V6","","",46,null],[4,"SockType","","",null,null],[13,"Stream","","",47,null],[13,"Datagram","","",47,null],[13,"SeqPacket","","",47,null],[13,"Raw","","",47,null],[13,"Rdm","","",47,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file descriptors passed between processes. See the description in the \"Ancillary messages\" section of the unix(7) man page.",48,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",49,null],[13,"Tcp","","",49,null],[13,"Ip","","",49,null],[13,"Ipv6","","",49,null],[13,"Udp","","",49,null],[13,"Netlink","","",49,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",50,null],[13,"Write","","Further  transmissions will be disallowed.",50,null],[13,"Both","","Further receptions and transmissions will be disallowed.",50,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"i":[{"n":"addressfamily"},{"n":"socktype"},{"n":"sockflag"},{"n":"c_int"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"i":[{"n":"addressfamily"},{"n":"socktype"},{"n":"c_int"},{"n":"sockflag"}],"o":{"n":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"i":[{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[5,"bind","","Bind a name to a socket",null,{"i":[{"n":"rawfd"},{"n":"sockaddr"}],"o":{"n":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"i":[{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"i":[{"n":"rawfd"},{"n":"sockflag"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"i":[{"n":"rawfd"},{"n":"sockaddr"}],"o":{"n":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"i":[{"n":"rawfd"},{"n":"o"}],"o":{"n":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"i":[{"n":"rawfd"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"i":[{"n":"rawfd"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"i":[{"n":"sockaddr_storage"},{"n":"usize"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"i":[{"n":"rawfd"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"netlinkaddr"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",38,{"i":[{"n":"self"},{"n":"h"}]}],[11,"new","","",38,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"netlinkaddr"}}],[11,"pid","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"groups","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"addressfamily"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"addressfamily"}],"o":{"n":"bool"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",43,null],[11,"from_std","","",45,{"i":[{"n":"socketaddr"}],"o":{"n":"inetaddr"}}],[11,"new","","",45,{"i":[{"n":"ipaddr"},{"n":"u16"}],"o":{"n":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",45,{"i":[{"n":"self"}],"o":{"n":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",45,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"to_std","","",45,{"i":[{"n":"self"}],"o":{"n":"socketaddr"}}],[11,"to_str","","",45,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"inetaddr"}],"o":{"n":"bool"}}],[11,"hash","","",45,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"inetaddr"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",46,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",46,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipaddr"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",36,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipv4addr"}}],[11,"from_std","","",36,{"i":[{"n":"ipv4addr"}],"o":{"n":"ipv4addr"}}],[11,"any","","",36,{"o":{"n":"ipv4addr"}}],[11,"octets","","",36,null],[11,"to_std","","",36,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"bool"}}],[11,"hash","","",36,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"new","","",37,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipv6addr"}}],[11,"from_std","","",37,{"i":[{"n":"ipv6addr"}],"o":{"n":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",37,null],[11,"to_std","","",37,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",35,{"i":[{"n":"p"}],"o":{"g":["unixaddr"],"n":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the \"abstract namespace\". This is a Linux-specific extension, primarily used to allow chrooted processes to communicate with specific daemons.",35,null],[11,"path","","If this address represents a filesystem path, return that path.",35,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"unixaddr"}],"o":{"n":"bool"}}],[11,"hash","","",35,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"unixaddr"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_inet","","",44,{"i":[{"n":"inetaddr"}],"o":{"n":"sockaddr"}}],[11,"new_unix","","",44,{"i":[{"n":"p"}],"o":{"g":["sockaddr"],"n":"result"}}],[11,"new_netlink","","",44,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"sockaddr"}}],[11,"family","","",44,{"i":[{"n":"self"}],"o":{"n":"addressfamily"}}],[11,"to_str","","",44,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"as_ffi_pair","","",44,null],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"sockaddr"}],"o":{"n":"bool"}}],[11,"hash","","",44,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"msgflags"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"le","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"gt","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"ge","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"cmp","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",51,{"o":{"n":"msgflags"}}],[11,"all","","Returns the set containing all flags.",51,{"o":{"n":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"i":[{"n":"c_int"}],"o":{"g":["msgflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"i":[{"n":"c_int"}],"o":{"n":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"remove","","Removes the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",51,{"i":[{"n":"self"}],"o":{"n":"msgflags"}}],[11,"from_iter","","",51,{"i":[{"n":"t"}],"o":{"n":"msgflags"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",39,{"i":[{"n":"ipv4addr"},{"g":["ipv4addr"],"n":"option"}],"o":{"n":"ip_mreq"}}],[11,"new","","",40,{"i":[{"n":"ipv6addr"}],"o":{"n":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"reuseaddr"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",52,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",52,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"reuseport"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",53,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",53,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"tcpnodelay"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",54,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",54,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",55,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"linger"}],"o":{"n":"result"}}],[11,"get","","",55,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["linger"],"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ipaddmembership"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",56,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ip_mreq"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ipdropmembership"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",57,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ip_mreq"}],"o":{"n":"result"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ipv6addmembership"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",58,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ipv6_mreq"}],"o":{"n":"result"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ipv6dropmembership"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",59,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ipv6_mreq"}],"o":{"n":"result"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ipmulticastttl"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",60,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"u8"}],"o":{"n":"result"}}],[11,"get","","",60,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["u8"],"n":"result"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ipmulticastloop"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",61,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",61,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"receivetimeout"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",62,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"timeval"}],"o":{"n":"result"}}],[11,"get","","",62,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["timeval"],"n":"result"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"sendtimeout"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",63,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"timeval"}],"o":{"n":"result"}}],[11,"get","","",63,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["timeval"],"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"broadcast"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",64,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",64,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"oobinline"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",65,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",65,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"socketerror"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",66,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["i32"],"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"keepalive"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",67,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",67,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"peercredentials"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",68,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["ucred"],"n":"result"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"tcpkeepidle"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",69,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"u32"}],"o":{"n":"result"}}],[11,"get","","",69,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["u32"],"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"rcvbuf"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",70,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"get","","",70,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["usize"],"n":"result"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"sndbuf"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",71,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"get","","",71,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["usize"],"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"rcvbufforce"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",72,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"sndbufforce"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",73,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"socktype"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",74,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["socktype"],"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"acceptconn"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",75,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",76,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",77,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"socktype"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"socktype"}],"o":{"n":"bool"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"sockflag"}}],[11,"partial_cmp","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"le","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"gt","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"ge","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"cmp","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",78,{"o":{"n":"sockflag"}}],[11,"all","","Returns the set containing all flags.",78,{"o":{"n":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"i":[{"n":"c_int"}],"o":{"g":["sockflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"i":[{"n":"c_int"}],"o":{"n":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"remove","","Removes the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",78,{"i":[{"n":"self"}],"o":{"n":"sockflag"}}],[11,"from_iter","","",78,{"i":[{"n":"t"}],"o":{"n":"sockflag"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",79,{"o":{"n":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",41,{"i":[{"n":"self"}],"o":{"n":"cmsgiterator"}}],[11,"next","","",80,{"i":[{"n":"self"}],"o":{"g":["controlmessage"],"n":"option"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"bool"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",82,null],[12,"st_ino","","",82,null],[12,"st_nlink","","",82,null],[12,"st_mode","","",82,null],[12,"st_uid","","",82,null],[12,"st_gid","","",82,null],[12,"st_rdev","","",82,null],[12,"st_size","","",82,null],[12,"st_blksize","","",82,null],[12,"st_blocks","","",82,null],[12,"st_atime","","",82,null],[12,"st_atime_nsec","","",82,null],[12,"st_mtime","","",82,null],[12,"st_mtime_nsec","","",82,null],[12,"st_ctime","","",82,null],[12,"st_ctime_nsec","","",82,null],[5,"FileStat","","",null,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"i":[{"n":"p"},{"n":"sflag"},{"n":"mode"},{"n":"dev_t"}],"o":{"n":"result"}}],[5,"mkdev","","",null,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"dev_t"}}],[5,"umask","","",null,{"i":[{"n":"mode"}],"o":{"n":"mode"}}],[5,"stat","","",null,{"i":[{"n":"p"}],"o":{"g":["filestat"],"n":"result"}}],[5,"lstat","","",null,{"i":[{"n":"p"}],"o":{"g":["filestat"],"n":"result"}}],[5,"fstat","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["filestat"],"n":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"sflag"}}],[11,"partial_cmp","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"le","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"gt","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"ge","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"cmp","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"ordering"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"o":{"n":"sflag"}}],[11,"all","","Returns the set containing all flags.",83,{"o":{"n":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"i":[{"n":"self"}],"o":{"n":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",83,{"i":[{"n":"mode_t"}],"o":{"g":["sflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",83,{"i":[{"n":"mode_t"}],"o":{"n":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"remove","","Removes the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",83,{"i":[{"n":"self"}],"o":{"n":"sflag"}}],[11,"from_iter","","",83,{"i":[{"n":"t"}],"o":{"n":"sflag"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"partial_cmp","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"le","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"gt","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ge","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"cmp","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",84,{"o":{"n":"mode"}}],[11,"all","","Returns the set containing all flags.",84,{"o":{"n":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"i":[{"n":"mode_t"}],"o":{"g":["mode"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"i":[{"n":"mode_t"}],"o":{"n":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"remove","","Removes the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"toggle","","Toggles the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"not","","Returns the complement of this set of flags.",84,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"from_iter","","",84,{"i":[{"n":"t"}],"o":{"n":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",85,null],[12,"c_oflag","","",85,null],[12,"c_cflag","","",85,null],[12,"c_lflag","","",85,null],[12,"c_line","","",85,null],[12,"c_cc","","",85,null],[12,"c_ispeed","","",85,null],[12,"c_ospeed","","",85,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",86,null],[13,"TCSADRAIN","","",86,null],[13,"TCSAFLUSH","","",86,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",87,null],[13,"TCOFLUSH","","",87,null],[13,"TCIOFLUSH","","",87,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",88,null],[13,"TCOON","","",88,null],[13,"TCIOFF","","",88,null],[13,"TCION","","",88,null],[5,"cfgetispeed","","",null,{"i":[{"n":"termios"}],"o":{"n":"speed_t"}}],[5,"cfgetospeed","","",null,{"i":[{"n":"termios"}],"o":{"n":"speed_t"}}],[5,"cfsetispeed","","",null,{"i":[{"n":"termios"},{"n":"speed_t"}],"o":{"n":"result"}}],[5,"cfsetospeed","","",null,{"i":[{"n":"termios"},{"n":"speed_t"}],"o":{"n":"result"}}],[5,"tcgetattr","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["termios"],"n":"result"}}],[5,"tcsetattr","","",null,{"i":[{"n":"rawfd"},{"n":"setarg"},{"n":"termios"}],"o":{"n":"result"}}],[5,"tcdrain","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"tcflow","","",null,{"i":[{"n":"rawfd"},{"n":"flowarg"}],"o":{"n":"result"}}],[5,"tcflush","","",null,{"i":[{"n":"rawfd"},{"n":"flusharg"}],"o":{"n":"result"}}],[5,"tcsendbreak","","",null,{"i":[{"n":"rawfd"},{"n":"c_int"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"inputflags"}}],[11,"partial_cmp","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"le","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"gt","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"ge","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"cmp","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"o":{"n":"inputflags"}}],[11,"all","","Returns the set containing all flags.",89,{"o":{"n":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"i":[{"n":"tcflag_t"}],"o":{"g":["inputflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"i":[{"n":"tcflag_t"}],"o":{"n":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"remove","","Removes the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"i":[{"n":"self"}],"o":{"n":"inputflags"}}],[11,"from_iter","","",89,{"i":[{"n":"t"}],"o":{"n":"inputflags"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"outputflags"}}],[11,"partial_cmp","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"le","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"gt","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"ge","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"cmp","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"o":{"n":"outputflags"}}],[11,"all","","Returns the set containing all flags.",90,{"o":{"n":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"i":[{"n":"tcflag_t"}],"o":{"g":["outputflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"i":[{"n":"tcflag_t"}],"o":{"n":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"remove","","Removes the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"i":[{"n":"self"}],"o":{"n":"outputflags"}}],[11,"from_iter","","",90,{"i":[{"n":"t"}],"o":{"n":"outputflags"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"controlflags"}}],[11,"partial_cmp","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"le","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"gt","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"ge","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"cmp","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",91,{"o":{"n":"controlflags"}}],[11,"all","","Returns the set containing all flags.",91,{"o":{"n":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"i":[{"n":"tcflag_t"}],"o":{"g":["controlflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"i":[{"n":"tcflag_t"}],"o":{"n":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"remove","","Removes the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",91,{"i":[{"n":"self"}],"o":{"n":"controlflags"}}],[11,"from_iter","","",91,{"i":[{"n":"t"}],"o":{"n":"controlflags"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"localflags"}}],[11,"partial_cmp","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"le","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"gt","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"ge","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"cmp","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",92,{"o":{"n":"localflags"}}],[11,"all","","Returns the set containing all flags.",92,{"o":{"n":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"i":[{"n":"tcflag_t"}],"o":{"g":["localflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"i":[{"n":"tcflag_t"}],"o":{"n":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"remove","","Removes the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",92,{"i":[{"n":"self"}],"o":{"n":"localflags"}}],[11,"from_iter","","",92,{"i":[{"n":"t"}],"o":{"n":"localflags"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"setarg"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"flusharg"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"o":{"n":"utsname"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"sysname","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"nodename","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"release","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"version","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"machine","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",94,null],[13,"Signaled","","",94,null],[13,"Stopped","","",94,null],[13,"Continued","","",94,null],[13,"StillAlive","","",94,null],[5,"waitpid","","",null,{"i":[{"n":"pid_t"},{"g":["waitpidflag"],"n":"option"}],"o":{"g":["waitstatus"],"n":"result"}}],[5,"wait","","",null,{"o":{"g":["waitstatus"],"n":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"waitpidflag"}}],[11,"partial_cmp","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"le","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"gt","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"ge","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"cmp","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",95,{"o":{"n":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",95,{"o":{"n":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"i":[{"n":"c_int"}],"o":{"g":["waitpidflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"i":[{"n":"c_int"}],"o":{"n":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"remove","","Removes the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",95,{"i":[{"n":"self"}],"o":{"n":"waitpidflag"}}],[11,"from_iter","","",95,{"i":[{"n":"t"}],"o":{"n":"waitpidflag"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"waitstatus"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"waitstatus"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"waitstatus"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"i":[{"n":"p"},{"n":"oflag"},{"n":"mode"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"shm_unlink","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"partial_cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"le","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"gt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ge","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",96,{"o":{"n":"mapflags"}}],[11,"all","","Returns the set containing all flags.",96,{"o":{"n":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"i":[{"n":"c_int"}],"o":{"g":["mapflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"i":[{"n":"c_int"}],"o":{"n":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"remove","","Removes the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"from_iter","","",96,{"i":[{"n":"t"}],"o":{"n":"mapflags"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"partial_cmp","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"le","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"gt","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ge","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"cmp","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",97,{"o":{"n":"msflags"}}],[11,"all","","Returns the set containing all flags.",97,{"o":{"n":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"i":[{"n":"c_int"}],"o":{"g":["msflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"i":[{"n":"c_int"}],"o":{"n":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"remove","","Removes the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",97,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"from_iter","","",97,{"i":[{"n":"t"}],"o":{"n":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"protflags"}}],[11,"partial_cmp","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"le","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"gt","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"ge","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"cmp","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",98,{"o":{"n":"protflags"}}],[11,"all","","Returns the set containing all flags.",98,{"o":{"n":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"i":[{"n":"c_int"}],"o":{"g":["protflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"i":[{"n":"c_int"}],"o":{"n":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"remove","","Removes the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",98,{"i":[{"n":"self"}],"o":{"n":"protflags"}}],[11,"from_iter","","",98,{"i":[{"n":"t"}],"o":{"n":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",99,null],[11,"from_slice","","",99,null],[11,"from_mut_slice","","",99,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",100,null],[12,"tv_usec","","",100,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"le","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"gt","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"ge","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"cmp","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"ordering"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zero","","",100,{"o":{"n":"timeval"}}],[11,"hours","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"minutes","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"seconds","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"milliseconds","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"num_hours","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"neg","","",100,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"add","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"timeval"}}],[11,"sub","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"timeval"}}],[11,"mul","","",100,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"timeval"}}],[11,"div","","",100,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"timeval"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"i":[{"n":"pid_t"},{"n":"ptraceoptions"}],"o":{"n":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"i":[{"n":"c_int"},{"g":["fdset"],"n":"option"},{"g":["fdset"],"n":"option"},{"g":["fdset"],"n":"option"},{"g":["timeval"],"n":"option"}],"o":{"g":["c_int"],"n":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"fdset"}}],[11,"new","","",101,{"o":{"n":"fdset"}}],[11,"insert","","",101,{"i":[{"n":"self"},{"n":"rawfd"}]}],[11,"remove","","",101,{"i":[{"n":"self"},{"n":"rawfd"}]}],[11,"contains","","",101,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"n":"bool"}}],[11,"clear","","",101,{"i":[{"n":"self"}]}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"quotafmt"},{"n":"p"}],"o":{"n":"result"}}],[5,"quotactl_off","","",null,{"i":[{"n":"quotatype"},{"n":"p"}],"o":{"n":"result"}}],[5,"quotactl_sync","","",null,{"i":[{"n":"quotatype"},{"n":"option"}],"o":{"n":"result"}}],[5,"quotactl_get","","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"c_int"},{"n":"dqblk"}],"o":{"n":"result"}}],[5,"quotactl_set","","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"c_int"},{"n":"dqblk"}],"o":{"n":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",103,null],[12,"bsoftlimit","","",103,null],[12,"curspace","","",103,null],[12,"ihardlimit","","",103,null],[12,"isoftlimit","","",103,null],[12,"curinodes","","",103,null],[12,"btime","","",103,null],[12,"itime","","",103,null],[12,"valid","","",103,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",102,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"ne","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"quotavalidflags"}}],[11,"partial_cmp","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"le","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"gt","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"ge","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"cmp","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"ordering"}}],[11,"hash","","",104,null],[11,"default","","",104,{"o":{"n":"quotavalidflags"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",104,{"o":{"n":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",104,{"o":{"n":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"i":[{"n":"u32"}],"o":{"g":["quotavalidflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"i":[{"n":"u32"}],"o":{"n":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"remove","","Removes the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",104,{"i":[{"n":"self"}],"o":{"n":"quotavalidflags"}}],[11,"from_iter","","",104,{"i":[{"n":"t"}],"o":{"n":"quotavalidflags"}}],[11,"default","","",103,{"o":{"n":"dqblk"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"i":[{"n":"p"},{"n":"statfs"}],"o":{"n":"result"}}],[5,"fstatfs","","",null,{"i":[{"n":"t"},{"n":"statfs"}],"o":{"n":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",105,null],[12,"f_bsize","","",105,null],[12,"f_blocks","","",105,null],[12,"f_bfree","","",105,null],[12,"f_bavail","","",105,null],[12,"f_files","","",105,null],[12,"f_ffree","","",105,null],[12,"f_fsid","","",105,null],[12,"f_namelen","","",105,null],[12,"f_frsize","","",105,null],[12,"f_spare","","",105,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"i":[{"n":"p"},{"n":"statvfs"}],"o":{"n":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"i":[{"n":"t"},{"n":"statvfs"}],"o":{"n":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to most efficient use of the filesystem",106,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this filesystem",106,null],[12,"f_blocks","","Total number of blocks on the filesystem",106,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those reserved for root",106,null],[12,"f_bavail","","Number of blocks available to non-root users",106,null],[12,"f_files","","Total number of inodes available on the filesystem",106,null],[12,"f_ffree","","Number of inodes available on the filesystem",106,null],[12,"f_favail","","Number of inodes available to non-root users",106,null],[12,"f_fsid","","File System ID",106,null],[12,"f_flag","","Mount Flags",106,null],[12,"f_namemax","","Maximum filename length",106,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"fsflags"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"o":{"n":"fsflags"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",107,{"o":{"n":"fsflags"}}],[11,"all","","Returns the set containing all flags.",107,{"o":{"n":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"i":[{"n":"c_ulong"}],"o":{"g":["fsflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"i":[{"n":"c_ulong"}],"o":{"n":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"remove","","Removes the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",107,{"i":[{"n":"self"}],"o":{"n":"fsflags"}}],[11,"from_iter","","",107,{"i":[{"n":"t"}],"o":{"n":"fsflags"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about the mount that contains `path`",106,{"i":[{"n":"p"}],"o":{"g":["statvfs"],"n":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",106,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",106,{"i":[{"n":"t"}],"o":{"g":["statvfs"],"n":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",106,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",106,{"o":{"n":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",108,null],[13,"Child","","",108,null],[5,"pivot_root","","",null,{"i":[{"n":"p1"},{"n":"p2"}],"o":{"n":"result"}}],[5,"fork","","",null,{"o":{"g":["fork"],"n":"result"}}],[5,"getpid","","",null,{"o":{"n":"pid_t"}}],[5,"getppid","","",null,{"o":{"n":"pid_t"}}],[5,"setpgid","","",null,{"i":[{"n":"pid_t"},{"n":"pid_t"}],"o":{"n":"result"}}],[5,"dup","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"dup2","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"dup3","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"n":"oflag"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"chdir","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"chown","","",null,{"i":[{"n":"p"},{"g":["uid_t"],"n":"option"},{"g":["gid_t"],"n":"option"}],"o":{"n":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"i":[{"n":"bool"},{"n":"bool"}],"o":{"n":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"o":{"n":"result"}}],[5,"pipe2","","",null,{"i":[{"n":"oflag"}],"o":{"n":"result"}}],[5,"ftruncate","","",null,{"i":[{"n":"rawfd"},{"n":"off_t"}],"o":{"n":"result"}}],[5,"isatty","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[5,"unlink","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"chroot","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"fsync","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"fdatasync","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"getuid","","",null,{"o":{"n":"uid_t"}}],[5,"geteuid","","",null,{"o":{"n":"uid_t"}}],[5,"getgid","","",null,{"o":{"n":"gid_t"}}],[5,"getegid","","",null,{"o":{"n":"gid_t"}}],[5,"setuid","","",null,{"i":[{"n":"uid_t"}],"o":{"n":"result"}}],[5,"setgid","","",null,{"i":[{"n":"gid_t"}],"o":{"n":"result"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"fork"}}],[11,"is_child","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_parent","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",109,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"with_nix_path","","",109,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_errno","","",1,{"i":[{"n":"errno"}],"o":{"n":"error"}}],[11,"last","","",1,{"o":{"n":"error"}}],[11,"invalid_argument","","",1,{"o":{"n":"error"}}],[11,"errno","","",1,{"i":[{"n":"self"}],"o":{"n":"errno"}}],[11,"from","","",1,{"i":[{"n":"errno"}],"o":{"n":"error"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"ioc","","Encode an ioctl command.",null,null],[14,"io","","Encode an ioctl command that has no associated data.",null,null],[14,"ior","","Encode an ioctl command that reads.",null,null],[14,"iow","","Encode an ioctl command that writes.",null,null],[14,"iorw","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl","","Declare a wrapper function around an ioctl.",null,null],[11,"clone","nix::sys::socket","",30,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","nix::sys::stat","",82,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","nix::sys::socket","",34,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[5,"cast","num","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"bigint","","",null,null],[4,"ParseBigIntError","num::bigint","",null,null],[13,"ParseInt","","",19,null],[13,"Other","","",19,null],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",20,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",20,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",20,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[3,"BigInt","","A big signed integer type.",null,null],[0,"big_digit","","",null,null],[6,"DoubleBigDigit","num::bigint::big_digit","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",21,null],[13,"NoSign","","",21,null],[13,"Plus","","",21,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",22,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",23,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[0,"traits","num","",null,null],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",29,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",31,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",32,null],[10,"inv","","Returns the multiplicative inverse of `self`.",32,null],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",33,null],[10,"mul_add","","Performs the fused multiply-add operation.",33,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",34,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"o":{"n":"self"}}],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",35,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns negative infinity.",35,{"o":{"n":"self"}}],[10,"nan","","Returns NaN.",35,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",35,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",35,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",35,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",35,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",35,{"o":{"n":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",35,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"trunc","","Return the integer part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fract","","Returns the fractional part of a number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",35,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"max","","Returns the maximum of the two numbers.",35,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"powi","","Raise a number to an integer power.",35,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",35,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",13,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",13,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",13,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",36,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",36,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",36,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",36,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",36,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",36,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",36,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",36,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",36,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",36,{"o":{"n":"self"}}],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",37,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",37,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",37,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",37,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",14,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",14,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",15,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",17,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",18,null],[10,"pow","","Returns `self` to the power `rhs`.",18,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",38,null],[13,"Invalid","","",38,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",39,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"new","num::bigint","Creates and initializes a BigInt.",40,{"i":[{"n":"sign"},{"g":["u32"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",40,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","num::traits","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"next","num::integer","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","num::iter","",42,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"next_back","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"mul","num::complex","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"description","","",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"g":["complex"],"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["complex"],"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"hash","","",0,null],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"rem_assign","num::bigint","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"rem_assign","","",47,null],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"to_bigint","","",40,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",47,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"bitor_assign","","",47,null],[11,"bitor_assign","","",47,null],[11,"to_i64","","",47,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",47,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",47,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",47,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"to_i64","","",40,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",40,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",40,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",40,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"abs","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"neg","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"neg","","Negate Sign value.",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"neg","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"checked_add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"shl_assign","","",47,null],[11,"from","","",47,{"i":[{"n":"usize"}],"o":{"n":"biguint"}}],[11,"from","","",47,{"i":[{"n":"u8"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"isize"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i8"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i64"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i16"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u32"}],"o":{"n":"biguint"}}],[11,"from","","",19,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"from","","",40,{"i":[{"n":"u32"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u64"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u16"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"usize"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"u16"}],"o":{"n":"bigint"}}],[11,"from","","",40,{"i":[{"n":"i32"}],"o":{"n":"bigint"}}],[11,"from","","",47,{"i":[{"n":"u64"}],"o":{"n":"biguint"}}],[11,"from","","",40,{"i":[{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"add_assign","","",47,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"shl","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shl","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"from_i64","","",47,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",47,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",47,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_i64","","",40,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",40,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",40,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"shr","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shr","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"checked_mul","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_mul","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_str","","",40,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str","","",47,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"default","","",40,{"o":{"n":"bigint"}}],[11,"default","","",47,{"o":{"n":"biguint"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"div_rem","","",40,null],[11,"div_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",40,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"div_rem","","",47,null],[11,"div_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",47,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bitand_assign","","",47,null],[11,"bitand_assign","","",47,null],[11,"to_biguint","","",47,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"to_biguint","","",40,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"one","","",40,{"o":{"n":"bigint"}}],[11,"one","","",47,{"o":{"n":"biguint"}}],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"sub_assign","","",47,null],[11,"bitxor_assign","","",47,null],[11,"bitxor_assign","","",47,null],[11,"checked_sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"div","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"zero","","",40,{"o":{"n":"bigint"}}],[11,"is_zero","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"zero","","",47,{"o":{"n":"biguint"}}],[11,"is_zero","","",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shr_assign","","",47,null],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",40,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",47,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"encode","","",21,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",40,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",47,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"biguint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bigint"}}],[11,"sub","","",47,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",40,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"div_assign","","",47,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"mul_assign","","",47,null],[11,"hash","","",47,null],[11,"hash","","",40,null],[11,"hash","","",21,null],[11,"decode","","",21,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"decode","","",40,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"decode","","",47,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"mul","num::rational","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"neg","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"zero","","",48,{"o":{"n":"ratio"}}],[11,"is_zero","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"add_assign","","",48,null],[11,"from","","",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"from","","",48,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into","","",48,null],[11,"one","","",48,{"o":{"n":"ratio"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"bool"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"decode","","",48,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"description","","",49,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",48,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"encode","","",48,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ordering"}}],[11,"checked_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"sub_assign","","",48,null],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"checked_add","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_mul","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"checked_div","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"partial_cmp","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_i64","","",48,{"i":[{"n":"i64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_u64","","",48,{"i":[{"n":"u64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f32","","",48,{"i":[{"n":"f32"}],"o":{"g":["ratio"],"n":"option"}}],[11,"from_f64","","",48,{"i":[{"n":"f64"}],"o":{"g":["ratio"],"n":"option"}}],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"div_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"mul_assign","","",48,null],[11,"hash","","",48,null],[11,"abs","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",48,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",48,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"rem_assign","","",48,null],[11,"new","num::bigint","Creates and initializes a `BigUint`.",47,{"i":[{"g":["u32"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",47,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",47,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",47,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",47,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",47,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",47,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",47,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",47,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",47,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"new","num::complex","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",41,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",48,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",48,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",48,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",48,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",48,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",48,{"i":[{"n":"t"}],"o":{"g":["ratio"],"n":"option"}}],[11,"approximate_float","","",48,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[4,"ParseBigIntError"],[8,"RandBigInt"],[4,"Sign"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"Roots"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"FloatCore"],[8,"FloatConst"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"IterBinomial"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeInclusive"],[3,"Range"],[3,"ParseComplexError"],[3,"BigUint"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",2,{"i":[{"n":"__d"}],"o":{"g":["biguint"],"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"ordering"}}],[11,"default","","",2,{"o":{"n":"biguint"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["biguint","parsebiginterror"],"n":"result"}}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitand","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitand_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"bitxor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"bitxor_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"shl","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shl_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shr","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"shr_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"zero","","",2,{"o":{"n":"biguint"}}],[11,"is_zero","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",2,{"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"add","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"add_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"sub","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"sub_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"mul","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"mul_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"div","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"div_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"biguint"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"bigdigit"}]}],[11,"rem","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"biguint"}}],[11,"rem_assign","","",2,{"i":[{"n":"self"},{"n":"doublebigdigit"}]}],[11,"neg","","",2,{"i":[{"n":"self"}],"o":{"n":"biguint"}}],[11,"checked_add","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_sub","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_mul","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_div","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"g":["biguint"],"n":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mod_floor","","",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",2,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",2,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",2,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",2,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",2,{"i":[{"n":"i64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_u64","","",2,{"i":[{"n":"u64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from_f64","","",2,{"i":[{"n":"f64"}],"o":{"g":["biguint"],"n":"option"}}],[11,"from","","",2,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"to_biguint","","",2,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"i":[{"g":["bigdigit"],"n":"vec"}],"o":{"n":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["u8"],"n":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",1,{"i":[{"n":"__d"}],"o":{"g":["sign"],"n":"result"}}],[11,"neg","","Negate Sign value.",1,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"mul","","",1,{"i":[{"n":"self"},{"n":"sign"}],"o":{"n":"sign"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",3,{"i":[{"n":"__d"}],"o":{"g":["bigint"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"ordering"}}],[11,"default","","",3,{"o":{"n":"bigint"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",3,{"i":[{"n":"str"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["bigint","parsebiginterror"],"n":"result"}}],[11,"shl","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"shr","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"zero","","",3,{"o":{"n":"bigint"}}],[11,"is_zero","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",3,{"o":{"n":"bigint"}}],[11,"abs","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"abs_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"signum","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"is_positive","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"add","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"sub","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"mul","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"div","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"bigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"doublebigdigit"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bigint"}}],[11,"rem","","",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bigint"}}],[11,"neg","","",3,{"i":[{"n":"self"}],"o":{"n":"bigint"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mod_floor","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_i64","","",3,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_u64","","",3,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","",3,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","",3,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_i64","","",3,{"i":[{"n":"i64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_u64","","",3,{"i":[{"n":"u64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from_f64","","",3,{"i":[{"n":"f64"}],"o":{"g":["bigint"],"n":"option"}}],[11,"from","","",3,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"biguint"}],"o":{"n":"self"}}],[11,"to_bigint","","",3,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_bigint","","",2,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[11,"to_biguint","","",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"i":[{"n":"sign"},{"g":["bigdigit"],"n":"vec"}],"o":{"n":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"i":[{"n":"sign"},{"n":"biguint"}],"o":{"n":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"i":[{"n":"self"}],"o":{"n":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[11,"checked_add","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_sub","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_mul","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"checked_div","","",3,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"g":["bigint"],"n":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"i":[{"n":"bigdigit"},{"n":"bigdigit"}],"o":{"n":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"i":[{"n":"self"}],"o":{"g":["biguint"],"n":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"i":[{"n":"self"}],"o":{"g":["bigint"],"n":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"biguint"},{"n":"biguint"}],"o":{"n":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"i":[{"n":"self"},{"n":"bigint"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"parsebiginterror"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",0,{"i":[{"n":"parseinterror"}],"o":{"n":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"biguint"}],"o":{"n":"biguint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"mul","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"div","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",7,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}],[11,"rem","","",8,{"i":[{"n":"self"},{"n":"bigint"}],"o":{"n":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"complex"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"complex"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["complex"],"n":"result"}}],[11,"new","","Create a new Complex",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"i","","Returns imaginary unit",0,{"o":{"n":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"inv","","Returns `1/self`",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"norm","","Calculate |self|",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"complex"}],"o":{"n":"self"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"complex"}}],[11,"zero","","",0,{"o":{"n":"complex"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"complex"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parsecomplexerror"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"o":{"n":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"o":{"n":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"add_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"div_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"mul_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"rem_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"ratio"}]}],[11,"sub_assign","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__st"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__dt"}],"o":{"g":["ratio"],"n":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"i":[{"n":"t"}],"o":{"g":["bigrational"],"n":"option"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"mul","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"div","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"rem","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"ratio"}}],[11,"checked_mul","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_div","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_add","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"checked_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"g":["ratio"],"n":"option"}}],[11,"neg","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"zero","","",0,{"o":{"n":"ratio"}}],[11,"is_zero","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"one","","",0,{"o":{"n":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"i":[{"n":"str"},{"n":"u32"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"abs","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"abs_sub","","",0,{"i":[{"n":"self"},{"n":"ratio"}],"o":{"n":"ratio"}}],[11,"signum","","",0,{"i":[{"n":"self"}],"o":{"n":"ratio"}}],[11,"is_positive","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_negative","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"i":[{"n":"str"}],"o":{"g":["ratio","parseratioerror"],"n":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"parseratioerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"parseratioerror"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","",0,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","",0,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[11,"approximate_float","","",0,{"i":[{"n":"f"}],"o":{"g":["ratio"],"n":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"o":{"n":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"i":[{"n":"t"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[11,"fmt","num_traits","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"i":[{"n":"u8"}],"o":{"n":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"i":[{"n":"str"},{"n":"e"}],"o":{"n":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"simple_encode_set"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"query_encode_set"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"default_encode_set"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"path_segment_encode_set"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",4,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"userinfo_encode_set"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"percentencode"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"percentdecode"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"i":[{"n":"self"}],"o":{"g":["cow","utf8error"],"n":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"i":[{"n":"seed"}],"o":{"n":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"o":{"n":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"o":{"n":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"i":[{"n":"range"},{"n":"r"}],"o":{"n":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"o":{"g":["osrng","error"],"n":"result"}}],[11,"reseed","rand::reseeding","",14,null],[11,"next_u32","rand","",15,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",15,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",15,null],[11,"next_u32","rand::chacha","",16,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand::isaac","",17,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand::read","",18,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",18,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",18,null],[11,"next_u32","rand","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u32","rand::isaac","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",20,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_u32","rand::reseeding","",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",0,null],[11,"next_u32","rand","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",21,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_u32","rand::os","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",13,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",13,null],[11,"ind_sample","rand::distributions::gamma","",22,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions::exponential","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","rand::distributions::gamma","",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","rand::distributions::normal","",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",29,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","rand::distributions::range","",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",31,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","rand::isaac","",20,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"clone","rand","",19,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"clone","rand::chacha","",16,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"clone","rand::distributions::gamma","",23,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"clone","rand::isaac","",17,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"clone","rand::distributions::gamma","",31,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"clone","rand::reseeding","",14,{"i":[{"n":"self"}],"o":{"n":"reseedwithdefault"}}],[11,"clone","rand","",21,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"clone","rand::distributions::normal","",29,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"clone","rand::distributions::exponential","",24,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"clone","rand::distributions::normal","",28,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"clone","rand::distributions","",12,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"clone","rand::distributions::range","",30,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"clone","rand::distributions::gamma","",22,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"clone","rand::distributions::exponential","",9,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"clone","rand","",15,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"clone","rand::distributions","",27,{"i":[{"n":"self"}],"o":{"n":"randsample"}}],[11,"rand","rand","",5,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"open01"}}],[11,"rand","rand::isaac","",17,{"i":[{"n":"r"}],"o":{"n":"isaacrng"}}],[11,"rand","rand","",5,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"open01"}}],[11,"rand","","",6,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"closed01"}}],[11,"rand","rand::distributions::normal","",8,{"i":[{"n":"r"}],"o":{"n":"standardnormal"}}],[11,"rand","rand::distributions::exponential","",9,{"i":[{"n":"r"}],"o":{"n":"exp1"}}],[11,"rand","rand","",19,{"i":[{"n":"r"}],"o":{"n":"xorshiftrng"}}],[11,"rand","","",6,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"closed01"}}],[11,"rand","rand::isaac","",20,{"i":[{"n":"r"}],"o":{"n":"isaac64rng"}}],[11,"rand","rand::chacha","",16,{"i":[{"n":"r"}],"o":{"n":"chacharng"}}],[11,"default","rand::reseeding","",14,{"o":{"n":"reseedwithdefault"}}],[11,"sample","rand::distributions::gamma","",22,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions","",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"sample","rand::distributions::gamma","",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::range","",30,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"sample","rand::distributions::exponential","",24,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions::gamma","",31,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",23,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","rand::distributions","",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"sample","rand::distributions::normal","",29,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"sample","","",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",19,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",19,null],[11,"reseed","rand::isaac","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",17,null],[11,"reseed","rand","",21,null],[11,"from_seed","","",21,null],[11,"reseed","rand::isaac","",20,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",20,null],[11,"reseed","rand::chacha","",16,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",16,null],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"next","rand","",32,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::reseeding","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::isaac","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::range","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::isaac","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::exponential","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::read","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::exponential","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::normal","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions::gamma","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::chacha","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::distributions","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::reseeding","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rand::os","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",17,{"o":{"n":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",20,{"o":{"n":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",16,{"o":{"n":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",16,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",18,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",19,{"o":{"n":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",21,{"o":{"g":["stdrng","error"],"n":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",30,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",23,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",22,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",26,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",31,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",29,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",28,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",24,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"new","rand::distributions","",27,{"o":{"n":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",25,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"ThreadRng"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"ReadRng"],[3,"XorShiftRng"],[3,"Isaac64Rng"],[3,"StdRng"],[3,"ChiSquared"],[3,"Gamma"],[3,"Exp"],[3,"WeightedChoice"],[3,"FisherF"],[3,"RandSample"],[3,"LogNormal"],[3,"Normal"],[3,"Range"],[3,"StudentT"],[3,"AsciiGenerator"],[3,"Generator"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"i":[{"n":"self"}],"o":{"n":"replacerref"}}],[11,"clone","regex","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"i":[{"n":"i"}],"o":{"n":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"i":[{"n":"self"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"i":[{"n":"i"}],"o":{"n":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"i":[{"n":"self"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"i":[{"n":"self"}],"o":{"n":"replacerref"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,null],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,null],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,null],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,null],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,{"i":[{"n":"self"}],"o":{"n":"capturelocations"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"capturelocations"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"len","","Returns the total number of capturing groups.",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,{"i":[{"n":"self"}],"o":{"n":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,null],[11,"len","","Returns the number of captured groups.",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",16,null],[11,"index","","",16,null],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"replace_append","","",18,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","",18,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"replace_append","","",2,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","",2,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","regex","",19,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",19,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",20,null],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex::bytes","",23,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",23,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,null],[11,"len","","Returns the total number of regular expressions in this set.",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",24,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",24,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",24,null],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex","",27,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_str","","Returns the matched text.",27,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",28,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["captures"],"n":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["usize"],"n":"option"}}],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"g":["usize"],"n":"option"}}],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,{"i":[{"n":"self"},{"n":"capturelocations"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,{"i":[{"n":"self"},{"n":"capturelocations"},{"n":"str"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"as_str","","Returns the original string of this regex.",28,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",28,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,{"i":[{"n":"self"}],"o":{"n":"capturelocations"}}],[11,"next","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",29,null],[11,"next","","",30,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"capturelocations"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"len","","Returns the total number of capturing groups.",32,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,{"i":[{"n":"self"}],"o":{"n":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"string"}]}],[11,"len","","Returns the number of captured groups.",33,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",33,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"str"}}],[11,"index","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"str"}}],[11,"next","","",34,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",35,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",36,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"replace_append","","",37,{"i":[{"n":"self"},{"n":"captures"},{"n":"string"}]}],[11,"no_expansion","","",37,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"replace_append","","",0,{"i":[{"n":"self"},{"n":"captures"},{"n":"string"}]}],[11,"no_expansion","","",0,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,{"i":[{"n":"self"},{"n":"captures"},{"n":"string"}]}],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,{"i":[{"n":"self"}],"o":{"n":"replacerref"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,{"i":[{"n":"self"}],"o":{"n":"replacerref"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"i":[{"n":"str"},{"n":"string"}]}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"i":[{"n":"char"}],"o":{"n":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"i":[{"n":"char"}],"o":{"n":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"i":[{"n":"u8"}],"o":{"n":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"i":[{"n":"ast"},{"n":"v"}],"o":{"n":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"parserbuilder"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",42,{"o":{"n":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"o":{"n":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"i":[{"n":"self"}],"o":{"n":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"parser"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"o":{"n":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ast","error"],"n":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["withcomments","error"],"n":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new printer.",44,{"o":{"n":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"i":[{"n":"self"},{"n":"ast"},{"n":"w"}],"o":{"n":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"i":[{"n":"self"}]}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"kind","","Return the type of this error.",46,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"i":[{"n":"self"}],"o":{"g":["span"],"n":"option"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"description","","",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"position"}],"o":{"g":["ordering"],"n":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"i":[{"n":"position"},{"n":"position"}],"o":{"n":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"i":[{"n":"position"}],"o":{"n":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"i":[{"n":"usize"},{"n":"usize"},{"n":"usize"}],"o":{"n":"position"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"withcomments"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"withcomments"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"withcomments"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"comment"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"comment"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"comment"}],"o":{"n":"bool"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"ast"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"alternation"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"alternation"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"alternation"}],"o":{"n":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"i":[{"n":"self"}],"o":{"n":"ast"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"concat"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"concat"}],"o":{"n":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"i":[{"n":"self"}],"o":{"n":"ast"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"literalkind"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"literalkind"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"literalkind"}],"o":{"n":"bool"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"specialliteralkind"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"specialliteralkind"}],"o":{"n":"bool"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"hexliteralkind"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"hexliteralkind"}],"o":{"n":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"class"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"span","","Return the span of this character class.",28,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"classperl"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"classperl"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"classperl"}],"o":{"n":"bool"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"classperlkind"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"classperlkind"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"classascii"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"classascii"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"classascii"}],"o":{"n":"bool"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"classasciikind"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"classasciikind"}],"o":{"n":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"i":[{"n":"str"}],"o":{"g":["classasciikind"],"n":"option"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"classunicode"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"classunicode"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"classunicode"}],"o":{"n":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"classunicodekind"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"classunicodekind"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"classunicodekind"}],"o":{"n":"bool"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"classunicodeopkind"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"classunicodeopkind"}],"o":{"n":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"classbracketed"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"classbracketed"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"classbracketed"}],"o":{"n":"bool"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"classset"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"classset"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"classset"}],"o":{"n":"bool"}}],[11,"union","","Build a set from a union.",33,{"i":[{"n":"classsetunion"}],"o":{"n":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"classsetitem"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"classsetrange"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"classsetrange"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"classsetrange"}],"o":{"n":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"classsetunion"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"classsetunion"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"classsetunion"}],"o":{"n":"bool"}}],[11,"push","","Push a new item in this union.",13,{"i":[{"n":"self"},{"n":"classsetitem"}]}],[11,"into_item","","Return this union as a character class set item.",13,{"i":[{"n":"self"}],"o":{"n":"classsetitem"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"classsetbinaryop"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"classsetbinaryopkind"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"assertion"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"assertion"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"assertion"}],"o":{"n":"bool"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"assertionkind"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"assertionkind"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"repetition"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"repetition"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"repetition"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"repetitionop"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"repetitionop"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"repetitionop"}],"o":{"n":"bool"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"repetitionkind"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"repetitionkind"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"repetitionkind"}],"o":{"n":"bool"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"repetitionrange"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"repetitionrange"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"repetitionrange"}],"o":{"n":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"i":[{"n":"self"}],"o":{"g":["flags"],"n":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"groupkind"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"groupkind"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"groupkind"}],"o":{"n":"bool"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"capturename"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"capturename"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"capturename"}],"o":{"n":"bool"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"setflags"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"setflags"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"setflags"}],"o":{"n":"bool"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"i":[{"n":"self"},{"n":"flagsitem"}],"o":{"g":["usize"],"n":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"i":[{"n":"self"},{"n":"flag"}],"o":{"g":["bool"],"n":"option"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"flagsitem"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"flagsitem"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"flagsitem"}],"o":{"n":"bool"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"flagsitemkind"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"flagsitemkind"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"flagsitemkind"}],"o":{"n":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"flag"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"bool"}}],[11,"drop","","",24,{"i":[{"n":"self"}]}],[11,"drop","","",33,{"i":[{"n":"self"}]}],[11,"clone","regex_syntax","",0,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"i":[{"n":"hir"},{"n":"v"}],"o":{"n":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"cmp","","",59,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"o":{"n":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"i":[{"n":"hir"}],"o":{"n":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"i":[{"n":"hir"}],"o":{"n":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["literals"],"n":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"bool"}}],[11,"union","","Unions this set with another set.",58,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"i":[{"n":"self"},{"n":"classunicode"}],"o":{"n":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"i":[{"n":"self"},{"n":"classbytes"}],"o":{"n":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"i":[{"n":"self"}]}],[11,"reverse","","Reverses all members in place.",58,{"i":[{"n":"self"}]}],[11,"clear","","Clears this set of all members.",58,{"i":[{"n":"self"}]}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"o":{"n":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cut","","Cuts this literal.",59,{"i":[{"n":"self"}]}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",59,{"i":[{"n":"self"},{"n":"literal"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",59,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new printer.",60,{"o":{"n":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"i":[{"n":"self"},{"n":"hir"},{"n":"w"}],"o":{"n":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"translatorbuilder"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",61,{"o":{"n":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"o":{"n":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"i":[{"n":"self"}],"o":{"n":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"translatorbuilder"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"translator"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"o":{"n":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"i":[{"n":"self"},{"n":"str"},{"n":"ast"}],"o":{"g":["hir","error"],"n":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"i":[{"n":"self"}]}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"kind","","Return the type of this error.",64,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"description","","",64,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"hir"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"bool"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"hirkind"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"hirkind"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"hirkind"}],"o":{"n":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"i":[{"n":"self"}],"o":{"n":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"i":[{"n":"self"}],"o":{"n":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"o":{"n":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"i":[{"n":"literal"}],"o":{"n":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"i":[{"n":"class"}],"o":{"n":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"i":[{"n":"anchor"}],"o":{"n":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"i":[{"n":"wordboundary"}],"o":{"n":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"i":[{"n":"repetition"}],"o":{"n":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"i":[{"n":"group"}],"o":{"n":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"i":[{"g":["hir"],"n":"vec"}],"o":{"n":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"i":[{"g":["hir"],"n":"vec"}],"o":{"n":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"i":[{"n":"bool"}],"o":{"n":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"i":[{"n":"bool"}],"o":{"n":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"literal"}],"o":{"n":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"class"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"i":[{"n":"self"}]}],[11,"negate","","Negate this character class in place.",52,{"i":[{"n":"self"}]}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"classunicode"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"classunicode"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"classunicode"}],"o":{"n":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"i":[{"n":"i"}],"o":{"n":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"o":{"n":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"i":[{"n":"self"},{"n":"classunicoderange"}]}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"i":[{"n":"self"}],"o":{"n":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"i":[{"n":"self"}]}],[11,"negate","","Negate this character class.",66,{"i":[{"n":"self"}]}],[11,"union","","Union this character class with the given character class, in place.",66,{"i":[{"n":"self"},{"n":"classunicode"}]}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"i":[{"n":"self"},{"n":"classunicode"}]}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"i":[{"n":"self"},{"n":"classunicode"}]}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"i":[{"n":"self"},{"n":"classunicode"}]}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",67,{"i":[{"n":"self"}],"o":{"g":["classunicoderange"],"n":"option"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"classunicoderange"}}],[11,"default","","",68,{"o":{"n":"classunicoderange"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"le","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"gt","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"ge","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"bool"}}],[11,"cmp","","",68,{"i":[{"n":"self"},{"n":"classunicoderange"}],"o":{"n":"ordering"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"i":[{"n":"char"},{"n":"char"}],"o":{"n":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"end","","Return the end of this range.",68,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"classbytes"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"classbytes"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"classbytes"}],"o":{"n":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"i":[{"n":"i"}],"o":{"n":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"o":{"n":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"i":[{"n":"self"},{"n":"classbytesrange"}]}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"i":[{"n":"self"}],"o":{"n":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"i":[{"n":"self"}]}],[11,"negate","","Negate this byte class.",69,{"i":[{"n":"self"}]}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"i":[{"n":"self"},{"n":"classbytes"}]}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"i":[{"n":"self"},{"n":"classbytes"}]}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"i":[{"n":"self"},{"n":"classbytes"}]}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"i":[{"n":"self"},{"n":"classbytes"}]}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",70,{"i":[{"n":"self"}],"o":{"g":["classbytesrange"],"n":"option"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"classbytesrange"}}],[11,"default","","",71,{"o":{"n":"classbytesrange"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"le","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"gt","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"ge","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"bool"}}],[11,"cmp","","",71,{"i":[{"n":"self"},{"n":"classbytesrange"}],"o":{"n":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"i":[{"n":"u8"},{"n":"u8"}],"o":{"n":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"end","","Return the end of this range.",71,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"anchor"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"anchor"}],"o":{"n":"bool"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"wordboundary"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"wordboundary"}],"o":{"n":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"groupkind"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"groupkind"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"groupkind"}],"o":{"n":"bool"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"repetition"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"repetition"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"repetition"}],"o":{"n":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"repetitionkind"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"repetitionkind"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"repetitionkind"}],"o":{"n":"bool"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"repetitionrange"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"repetitionrange"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"repetitionrange"}],"o":{"n":"bool"}}],[11,"drop","","",65,{"i":[{"n":"self"}]}],[11,"clone","regex_syntax","",72,{"i":[{"n":"self"}],"o":{"n":"parserbuilder"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",72,{"o":{"n":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"o":{"n":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"i":[{"n":"self"}],"o":{"n":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parserbuilder"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"parser"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"o":{"n":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["hir"],"n":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"i":[{"n":"self"}]}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"i":[{"n":"self"},{"n":"ast"}],"o":{"n":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetitem"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"i":[{"n":"self"},{"n":"classsetbinaryop"}],"o":{"n":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"i":[{"n":"self"}]}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"i":[{"n":"self"},{"n":"hir"}],"o":{"n":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"i":[{"n":"self"}],"o":{"n":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"i":[{"n":"self"}],"o":{"g":["vec","frombase64error"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"characterset"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"frombase64error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"i":[{"n":"self"}],"o":{"g":["vec","fromhexerror"],"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"fromhexerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"i":[{"n":"errorcode"}],"o":{"n":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"i":[{"n":"str"}],"o":{"n":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"errorcode"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"errorcode"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"encodererror"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",12,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",12,{"i":[{"n":"parsererror"}],"o":{"n":"decodererror"}}],[11,"description","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"error"}],"o":{"n":"parsererror"}}],[11,"description","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",13,{"i":[{"n":"error"}],"o":{"n":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"emit_nil","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",17,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",17,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",17,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",17,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",17,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",17,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",17,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",17,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",17,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",17,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",17,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"encode","","",9,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"i":[{"n":"read"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"i":[{"n":"str"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"i":[{"n":"self"}],"o":{"n":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"json"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"json"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"stackelement"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",18,{"o":{"n":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"i":[{"n":"self"}],"o":{"g":["stackelement"],"n":"option"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["jsonevent"],"n":"option"}}],[11,"new","","Creates the JSON parser.",19,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"i":[{"n":"self"}],"o":{"n":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"build","","",20,{"i":[{"n":"self"}],"o":{"g":["json","buildererror"],"n":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"i":[{"n":"json"}],"o":{"n":"decoder"}}],[11,"read_nil","","",21,{"i":[{"n":"self"}],"o":{"n":"decoderesult"}}],[11,"read_usize","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decoderesult"}}],[11,"read_u8","","",21,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decoderesult"}}],[11,"read_u16","","",21,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decoderesult"}}],[11,"read_u32","","",21,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decoderesult"}}],[11,"read_u64","","",21,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decoderesult"}}],[11,"read_isize","","",21,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decoderesult"}}],[11,"read_i8","","",21,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decoderesult"}}],[11,"read_i16","","",21,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decoderesult"}}],[11,"read_i32","","",21,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decoderesult"}}],[11,"read_i64","","",21,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decoderesult"}}],[11,"read_f32","","",21,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decoderesult"}}],[11,"read_f64","","",21,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decoderesult"}}],[11,"read_bool","","",21,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decoderesult"}}],[11,"read_char","","",21,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decoderesult"}}],[11,"read_str","","",21,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"decoderesult"}}],[11,"read_enum","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_option","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq_elt","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"error","","",21,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodererror"}}],[11,"to_json","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["json","parsererror"],"n":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"read_usize","","Read a usize value.",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_isize","","Read a isize value.",25,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_bool","","Read a bool value.",25,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_char","","Read a char value.",25,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[10,"read_str","","Read a string value.",25,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct","","Read an struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_option","","Read an optional value.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"emit_char","","Emit a char value.",26,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"emit_str","","Emit a string value.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["vec"],"n":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[10,"as_usize","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",1,{"i":[{"n":"usize"}],"o":{"n":"slab"}}],[11,"new_starting_at","","",1,{"i":[{"n":"i"},{"n":"usize"}],"o":{"n":"slab"}}],[11,"count","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"remaining","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"has_remaining","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"contains","","",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"get","","",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_mut","","",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"insert","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated usize in their constructor.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"remove","","Releases the given slot",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"replace","","",1,{"i":[{"n":"self"},{"n":"i"},{"n":"t"}],"o":{"n":"option"}}],[11,"replace_with","","Execute a function on the value in the slot and put the result of the function back into the slot. If function returns None, slot is left empty on exit.",1,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"iter","","",1,{"i":[{"n":"self"}],"o":{"n":"slabiter"}}],[11,"iter_mut","","",1,{"i":[{"n":"self"}],"o":{"n":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"i":[{"n":"self"}]}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"index_mut","","",1,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"o":{"n":"threadlocal"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"o":{"n":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"i":[{"n":"self"}]}],[11,"into_iter","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"o":{"n":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"o":{"n":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"i":[{"n":"self"}],"o":{"n":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"i":[{"n":"self"}]}],[11,"into_iter","","",3,{"i":[{"n":"self"}],"o":{"n":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["threadpool"] = {"doc":"A thread pool used to execute functions in parallel.","items":[[3,"Builder","threadpool","[`ThreadPool`] factory, which can be used in order to configure the properties of the [`ThreadPool`].",null,null],[3,"ThreadPool","","Abstraction of a thread pool for basic parallelism.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"builder"}}],[11,"default","","",0,{"o":{"n":"builder"}}],[11,"new","","Initiate a new [`Builder`].",0,{"o":{"n":"builder"}}],[11,"num_threads","","Set the maximum number of worker-threads that will be alive at any given moment by the built [`ThreadPool`]. If not specified, defaults the number of threads to the number of CPUs.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"builder"}}],[11,"thread_name","","Set the thread name for each of the threads spawned by the built [`ThreadPool`]. If not specified, threads spawned by the thread pool will be unnamed.",0,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"builder"}}],[11,"thread_stack_size","","Set the stack size (in bytes) for each of the threads spawned by the built [`ThreadPool`]. If not specified, threads spawned by the threadpool will have a stack size [as specified in the `std::thread` documentation][thread].",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"builder"}}],[11,"build","","Finalize the [`Builder`] and build the [`ThreadPool`].",0,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"new","","Creates a new thread pool capable of executing `num_threads` number of jobs concurrently.",1,{"i":[{"n":"usize"}],"o":{"n":"threadpool"}}],[11,"with_name","","Creates a new thread pool capable of executing `num_threads` number of jobs concurrently. Each thread will have the [name][thread name] `name`.",1,{"i":[{"n":"string"},{"n":"usize"}],"o":{"n":"threadpool"}}],[11,"new_with_name","","Deprecated: Use `ThreadPool::with_name`",1,{"i":[{"n":"string"},{"n":"usize"}],"o":{"n":"threadpool"}}],[11,"execute","","Executes the function `job` on a thread in the pool.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"queued_count","","Returns the number of jobs waiting to executed in the pool.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"active_count","","Returns the number of currently active threads.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"max_count","","Returns the maximum number of threads the pool will execute concurrently.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"panic_count","","Returns the number of panicked threads over the lifetime of the pool.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_threads","","Deprecated: Use `ThreadPool::set_num_threads`",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"set_num_threads","","Sets the number of worker-threads to use as `num_threads`. Can be used to change the threadpool size during runtime. Will not abort already running or waiting threads.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"join","","Block the current thread until all jobs in the pool have been executed.",1,{"i":[{"n":"self"}]}],[11,"clone","","Cloning a pool will create a new handle to the pool. The behavior is similar to Arc.",1,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","Check if you are working with the same pool",1,{"i":[{"n":"self"},{"n":"threadpool"}],"o":{"n":"bool"}}]],"paths":[[3,"Builder"],[3,"ThreadPool"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["tm","parseerror"],"n":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"o":{"n":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"o":{"n":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"o":{"n":"f64"}}],[5,"tzset","","",null,{}],[5,"empty_tm","","",null,{"o":{"n":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"o":{"n":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"o":{"n":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"i":[{"n":"str"},{"n":"tm"}],"o":{"g":["string","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"i":[{"n":"stdduration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"i":[{"n":"self"}],"o":{"g":["stdduration","outofrangeerror"],"n":"result"}}],[11,"neg","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"outofrangeerror"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"ordering"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"i":[{"n":"i64"},{"n":"i32"}],"o":{"n":"timespec"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"duration"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"o":{"n":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"i":[{"n":"self"},{"n":"precisetime"}],"o":{"n":"duration"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"steadytime"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"ordering"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"o":{"n":"steadytime"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"duration"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["tmfmt","parseerror"],"n":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"i":[{"n":"u32"}],"o":{"g":["string"],"n":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"i":[{"n":"u32"}],"o":{"g":["string"],"n":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"i":[{"n":"string"}]}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"i":[{"n":"string"}]}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"i":[{"n":"propertytable"},{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"i":[{"n":"propertyvaluetable"},{"n":"str"}],"o":{"g":["propertyvalues"],"n":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"i":[{"n":"propertyvalues"},{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"i":[{"n":"char"}],"o":{"n":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"ordering"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"o":{"n":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"o":{"n":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"o":{"n":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"o":{"n":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"u8"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"i":[{"n":"u8"}],"o":{"g":["level","error"],"n":"result"}}],[11,"number","","The level number.",5,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"i":[{"n":"self"}],"o":{"n":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","Create level by number",5,{"i":[{"n":"u8"}],"o":{"n":"level"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"clone","unicode_bidi","",3,{"i":[{"n":"self"}],"o":{"n":"bidiclass"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bidiclass"}],"o":{"n":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"paragraphinfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"paragraphinfo"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"initialinfo"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"initialinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"i":[{"n":"str"},{"g":["level"],"n":"option"}],"o":{"n":"initialinfo"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"bidiinfo"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"bidiinfo"}],"o":{"n":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"i":[{"n":"str"},{"g":["level"],"n":"option"}],"o":{"n":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["level"],"n":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["level"],"n":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["str"],"n":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",null,null],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",null,null],[13,"Yes","","The text is definitely normalized.",0,null],[13,"No","","The text is definitely not normalized.",0,null],[13,"Maybe","","The text may be normalized.",0,null],[5,"is_nfc","","Authoritatively check if a string is in NFC.",null,{"i":[{"n":"str"}],"o":{"n":"bool"}}],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",null,{"i":[{"n":"i"}],"o":{"n":"isnormalized"}}],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",null,{"i":[{"n":"str"}],"o":{"n":"bool"}}],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",null,{"i":[{"n":"i"}],"o":{"n":"isnormalized"}}],[5,"is_nfd","","Authoritatively check if a string is in NFD.",null,{"i":[{"n":"str"}],"o":{"n":"bool"}}],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",null,{"i":[{"n":"i"}],"o":{"n":"isnormalized"}}],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",null,{"i":[{"n":"str"}],"o":{"n":"bool"}}],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",null,{"i":[{"n":"i"}],"o":{"n":"isnormalized"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"isnormalized"}],"o":{"n":"bool"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"f"}]}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"f"}]}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"char"}],"o":{"g":["char"],"n":"option"}}],[5,"canonical_combining_class","","",null,{"i":[{"n":"char"}],"o":{"n":"u8"}}],[5,"is_combining_mark","","",null,{"i":[{"n":"char"}],"o":{"n":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,{"i":[{"n":"self"}],"o":{"n":"streamsafe"}}]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"i":[{"n":"self"}]}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",null,null],[13,"Backslash","","",4,null],[13,"C0SpaceIgnored","","",4,null],[13,"EmbeddedCredentials","","",4,null],[13,"ExpectedDoubleSlash","","",4,null],[13,"ExpectedFileDoubleSlash","","",4,null],[13,"FileWithHostAndWindowsDrive","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"NullInFragment","","",4,null],[13,"PercentDecode","","",4,null],[13,"TabOrNewlineIgnored","","",4,null],[13,"UnencodedAtSign","","",4,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",5,null],[13,"AfterScheme","","",5,null],[13,"BeforeUsername","","",5,null],[13,"AfterUsername","","",5,null],[13,"BeforePassword","","",5,null],[13,"AfterPassword","","",5,null],[13,"BeforeHost","","",5,null],[13,"AfterHost","","",5,null],[13,"BeforePort","","",5,null],[13,"AfterPort","","",5,null],[13,"BeforePath","","",5,null],[13,"AfterPath","","",5,null],[13,"BeforeQuery","","",5,null],[13,"AfterQuery","","",5,null],[13,"BeforeFragment","","",5,null],[13,"AfterFragment","","",5,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"host"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_opaque","","",2,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"hostandport"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"hostandport"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_socket_addrs","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"o":{"n":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"opaqueorigin"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",3,{"i":[{"n":"errors"}],"o":{"n":"parseerror"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"syntaxviolation"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"syntaxviolation"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"str"}}],[11,"index","","",9,{"i":[{"n":"self"},{"g":["position"],"n":"rangefrom"}],"o":{"n":"str"}}],[11,"index","","",9,{"i":[{"n":"self"},{"g":["position"],"n":"rangeto"}],"o":{"n":"str"}}],[11,"index","","",9,{"i":[{"n":"self"},{"g":["position"],"n":"range"}],"o":{"n":"str"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",10,{"i":[{"n":"self"}],"o":{"n":"string"}}],[10,"finish","","",10,null],[16,"Finished","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,{"i":[{"n":"self"}],"o":{"n":"parseintoowned"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",13,null],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_mut_string","url","",15,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"finish","","",15,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[11,"clone","url","",9,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"parseoptions"}}],[11,"base_url","","Change the base URL",16,{"i":[{"n":"self"},{"g":["url"],"n":"option"}],"o":{"n":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,{"i":[{"n":"self"},{"g":["fn"],"n":"option"}],"o":{"n":"self"}}],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,{"i":[{"n":"self"},{"g":["fn"],"n":"option"}],"o":{"n":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"parse","","Parse an absolute URL from a string.",9,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,{"i":[{"n":"str"},{"n":"i"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,{"o":{"n":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_string","","Return the serialization of this URL.",9,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,{"i":[{"n":"self"}],"o":{"g":["host"],"n":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Return the port number for this URL, if any.",9,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["hostandport"],"n":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,{"i":[{"n":"self"}],"o":{"g":["split"],"n":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",9,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"set_query","","Change this URL’s query string.",9,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,{"i":[{"n":"self"}],"o":{"g":["urlquery"],"n":"serializer"}}],[11,"set_path","","Change this URL’s path.",9,{"i":[{"n":"self"},{"n":"str"}]}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,{"i":[{"n":"self"}],"o":{"g":["pathsegmentsmut"],"n":"result"}}],[11,"set_port","","Change this URL’s port number.",9,{"i":[{"n":"self"},{"g":["u16"],"n":"option"}],"o":{"n":"result"}}],[11,"set_host","","Change this URL’s host.",9,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_password","","Change this URL’s password.",9,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"result"}}],[11,"set_username","","Change this URL’s username.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,{"i":[{"n":"self"}],"o":{"g":["pathbuf"],"n":"result"}}],[11,"to_socket_addrs","","",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"as_ref","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",15,{"i":[{"n":"self"}]}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utf8sequence"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"utf8range"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"i":[{"n":"char"},{"n":"char"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"void"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
